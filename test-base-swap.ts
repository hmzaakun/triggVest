#!/usr/bin/env ts-node

import { baseSwapService } from './src/services/oneinch';
import { getSavedWalletSets } from './src/services/wallet';
import { showBaseSwapInterface } from './src/ui/baseSwap';

async function testBaseSwap() {
  console.log('üî∑ Test du service Base Swap avec 1inch');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  
  try {
    // Test 1: V√©rifier la connexion 1inch
    console.log('\nüîç Test 1: Connexion 1inch API...');
    const tokens = await baseSwapService.getPopularBaseTokens();
    console.log('‚úÖ Tokens support√©s r√©cup√©r√©s:');
    Object.entries(tokens).forEach(([symbol, token]) => {
      console.log(`   ‚Ä¢ ${symbol}: ${token.name}`);
    });

    // Test 2: Obtenir un prix
    console.log('\nüìä Test 2: Prix USDC/ETH...');
    const price = await baseSwapService.getUSDCToETHPrice("100");
    if (price) {
      console.log(`‚úÖ Prix pour 100 USDC:`);
      console.log(`   üìà ETH re√ßu: ${price.ethAmount.toFixed(8)} ETH`);
      console.log(`   üìä Taux: ${price.rateFormatted}`);
    } else {
      console.log('‚ùå Prix indisponible');
    }

    // Test 3: V√©rifier les wallet sets
    console.log('\nüëõ Test 3: Wallet Sets disponibles...');
    const walletSets = getSavedWalletSets();
    if (walletSets.length > 0) {
      console.log('‚úÖ Wallet sets trouv√©s:');
      walletSets.forEach((ws, index) => {
        console.log(`   ${index + 1}. ${ws.walletSetName} (${ws.wallets.length} wallets)`);
        const baseWallets = ws.wallets.filter(w => 
          w.blockchain === 'BASE-SEPOLIA' || w.blockchain.includes('BASE')
        );
        console.log(`      - Wallets Base: ${baseWallets.length}`);
      });

      // Test 4: Interface interactive
      console.log('\nüöÄ Test 4: Interface interactive...');
      console.log('üí° Lancement de l\'interface Base Swap...');
      
      await showBaseSwapInterface(walletSets[0].walletSetName);
    } else {
      console.log('‚ùå Aucun wallet set trouv√©');
      console.log('üí° Cr√©ez d\'abord un wallet set avec des wallets Base');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    
    if (error.response) {
      console.error('üì° D√©tails de l\'erreur API:');
      console.error(`   Status: ${error.response.status}`);
      console.error(`   Message: ${error.response.data?.message || error.response.statusText}`);
    }
    
    // V√©rifier les variables d'environnement
    console.log('\nüîß Configuration:');
    console.log(`   ONEINCH_API_KEY: ${process.env.ONEINCH_API_KEY ? 'Configur√©' : 'Non configur√©'}`);
    console.log(`   CIRCLE_API_KEY: ${process.env.CIRCLE_API_KEY ? 'Configur√©' : 'Non configur√©'}`);
    
    if (!process.env.ONEINCH_API_KEY) {
      console.log('\nüí° Pour configurer votre cl√© API 1inch:');
      console.log('   1. Allez sur https://1inch.dev/');
      console.log('   2. Cr√©ez un compte et obtenez votre cl√© API');
      console.log('   3. Ajoutez ONEINCH_API_KEY=votre_cl√© dans le fichier .env');
    }
  }
}

// Configuration d'environnement
async function checkEnvironment() {
  console.log('\nüîß V√©rification de l\'environnement:');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  
  const requiredEnvVars = [
    'CIRCLE_API_KEY',
    'ONEINCH_API_KEY'
  ];
  
  requiredEnvVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      console.log(`‚úÖ ${varName}: Configur√©`);
    } else {
      console.log(`‚ùå ${varName}: Non configur√©`);
    }
  });
  
  console.log('\nüí° Fichier .env requis:');
  console.log('   CIRCLE_API_KEY=TEST_API_KEY:your_key_id:your_secret');
  console.log('   ONEINCH_API_KEY=your_1inch_api_key');
}

// Ex√©cution principale
async function main() {
  await checkEnvironment();
  await testBaseSwap();
}

if (require.main === module) {
  main().catch(console.error);
} 