import 'dotenv/config';
import { transferToExternalWallet, quickTransferToUser, validateTransfer, estimateTransferFees } from '../services/transfer';
import { getSavedWalletSets } from '../services/wallet';

/**
 * Exemple simple: Transfer de fonds Circle vers wallet utilisateur
 * Plus simple que CCTP - fonctionne sur la m√™me blockchain
 */

async function simpleTransferExample() {
  try {
    console.log("üí∏ === EXEMPLE TRANSFER SIMPLE ===\n");

    // 1. Sc√©nario: L'utilisateur veut r√©cup√©rer ses fonds
    const transferScenario = {
      userAddress: "0x30FaA798B5d332A733150bCA1556D7BeDA2CeB87", // MetaMask de l'utilisateur
      amount: "2", // 5 USDC (petit montant pour test - vous avez 10 USDC disponible)
      reason: "Withdrawal demand√© par l'utilisateur"
    };

    console.log(`üë§ Adresse utilisateur: ${transferScenario.userAddress}`);
    console.log(`üí∞ Montant √† transf√©rer: ${transferScenario.amount} USDC`);
    console.log(`üìù Raison: ${transferScenario.reason}\n`);

    // 2. Trouver le wallet source (newSet)
    const walletSets = getSavedWalletSets();
    const sourceWalletSet = walletSets.find(ws => ws.walletSetName === "newSet");
    
    if (!sourceWalletSet) {
      console.log('‚ùå Wallet set "newSet" non trouv√©');
      return;
    }

    // Prendre le wallet Sepolia (ou le premier disponible)
    const sourceWallet = sourceWalletSet.wallets.find(w => w.blockchain === "ARB-SEPOLIA") 
                        || sourceWalletSet.wallets[0];

    if (!sourceWallet) {
      console.log("‚ùå Aucun wallet source trouv√©");
      return;
    }

    console.log(`üì± Wallet source: ${sourceWallet.address} (${sourceWallet.blockchain})`);
    console.log(`üÜî Wallet ID: ${sourceWallet.id}\n`);

    // 3. Validation pr√©-transfer
    console.log("üîç === VALIDATION PR√â-TRANSFER ===");
    
    const validation = await validateTransfer(
      sourceWallet.id,
      transferScenario.userAddress,
      transferScenario.amount
    );

    console.log(`‚úÖ Adresse valide: ${validation.checks.validAddress}`);
    console.log(`‚úÖ Montant valide: ${validation.checks.validAmount}`);
    console.log(`‚úÖ Solde suffisant: ${validation.checks.sufficientBalance}`);
    console.log(`üí∞ Solde disponible: ${validation.checks.availableBalance} USDC`);

    if (!validation.valid) {
      console.log("\n‚ùå === VALIDATION √âCHOU√âE ===");
      validation.errors.forEach(error => {
        console.log(`   ${error}`);
      });
      return;
    }

    console.log("‚úÖ Toutes les validations pass√©es!\n");

    // 4. Estimation des frais
    console.log("üí≥ === ESTIMATION DES FRAIS ===");
    
    const feeEstimation = await estimateTransferFees(
      sourceWallet.id,
      transferScenario.amount,
      "MEDIUM"
    );

    console.log(`üíµ Frais estim√©s: ${feeEstimation.estimatedFee}`);
    console.log(`‚è∞ Temps estim√©: ${feeEstimation.estimatedTime}`);
    console.log(`üí° Recommandation: ${feeEstimation.recommendation}\n`);

    // 5. Demander confirmation (simul√©)
    console.log("ü§î === CONFIRMATION ===");
    console.log(`‚ùì Transf√©rer ${transferScenario.amount} USDC vers ${transferScenario.userAddress}?`);
    console.log(`‚ùì Accepter les frais estim√©s: ${feeEstimation.estimatedFee}?`);
    console.log(`‚ùì Temps d'attente acceptable: ${feeEstimation.estimatedTime}?`);
    
    // Simuler l'approbation
    const approved = true;
    
    if (!approved) {
      console.log("‚ùå Transfer annul√©\n");
      return;
    }

    console.log("‚úÖ Transfer approuv√©!\n");

    // 6. Ex√©cuter le transfer
    console.log("üöÄ === EX√âCUTION DU TRANSFER ===");

    const result = await quickTransferToUser(
      sourceWallet.id,
      transferScenario.userAddress,
      transferScenario.amount
    );

    // 7. Afficher les r√©sultats
    if (result.success) {
      console.log("\nüéâ === TRANSFER R√âUSSI ===");
      console.log(`‚úÖ Transaction ID: ${result.transactionId}`);
      console.log(`‚è∞ Confirmation estim√©e: ${result.estimatedConfirmation}`);
      console.log(`üîó Suivre la transaction dans Circle Console ou blockchain explorer`);
      
      console.log("\nüìã === INFORMATIONS UTILISATEUR ===");
      console.log(`üéä ${transferScenario.amount} USDC envoy√©s vers votre wallet!`);
      console.log(`üì± V√©rifiez votre solde dans MetaMask`);
      console.log(`üïê La transaction devrait arriver dans ${result.estimatedConfirmation}`);
      console.log(`üîç Transaction ID pour support: ${result.transactionId}`);

    } else {
      console.log("\n‚ùå === TRANSFER √âCHOU√â ===");
      console.log(`üíî Erreur: ${result.error}`);
      
      console.log("\nüõ†Ô∏è === SOLUTIONS ===");
      console.log("   1. V√©rifier le solde du wallet source");
      console.log("   2. V√©rifier l'adresse de destination");
      console.log("   3. R√©essayer avec un montant plus petit");
      console.log("   4. Contacter le support si probl√®me persiste");
    }

  } catch (error) {
    console.error("\nüí• Erreur dans l'exemple de transfer:", error);
  }
}

// Fonction utilitaire pour les d√©veloppeurs
export const createUserWithdrawalService = () => {
  return {
    // √âtape 1: Validation
    validateWithdrawal: validateTransfer,
    
    // √âtape 2: Estimation
    estimateCosts: estimateTransferFees,
    
    // √âtape 3: Ex√©cution
    executeWithdrawal: transferToExternalWallet,
    
    // Fonction rapide tout-en-un
    quickWithdrawal: quickTransferToUser
  };
};

// Interface UI pour frontend
export interface WithdrawalRequest {
  userId: string;
  destinationAddress: string;
  amount: string;
  reason?: string;
}

export interface WithdrawalFlow {
  step: "validation" | "estimation" | "confirmation" | "execution" | "completed";
  data: any;
  error?: string;
}

// Exemple d'int√©gration pour votre app
export const processUserWithdrawal = async (
  request: WithdrawalRequest
): Promise<WithdrawalFlow[]> => {
  const steps: WithdrawalFlow[] = [];
  
  try {
    // √âtape 1: Validation
    steps.push({
      step: "validation",
      data: { message: "Validation de la demande..." }
    });
    
    // Trouver le wallet de l'utilisateur
    const walletSets = getSavedWalletSets();
    const userWalletSet = walletSets.find(ws => ws.walletSetName === request.userId);
    
    if (!userWalletSet?.wallets[0]) {
      steps.push({
        step: "validation",
        data: { message: "Wallet non trouv√©" },
        error: "Aucun wallet trouv√© pour cet utilisateur"
      });
      return steps;
    }

    const validation = await validateTransfer(
      userWalletSet.wallets[0].id,
      request.destinationAddress,
      request.amount
    );

    if (!validation.valid) {
      steps.push({
        step: "validation",
        data: validation,
        error: validation.errors.join(", ")
      });
      return steps;
    }

    // √âtape 2: Estimation
    steps.push({
      step: "estimation",
      data: await estimateTransferFees(userWalletSet.wallets[0].id, request.amount)
    });

    // √âtape 3: Ex√©cution (si tout va bien)
    steps.push({
      step: "execution",
      data: { message: "Ex√©cution du transfer..." }
    });

    const result = await quickTransferToUser(
      userWalletSet.wallets[0].id,
      request.destinationAddress,
      request.amount
    );

    if (result.success) {
      steps.push({
        step: "completed",
        data: {
          transactionId: result.transactionId,
          message: "Transfer r√©ussi!"
        }
      });
    } else {
      steps.push({
        step: "execution",
        data: result,
        error: result.error
      });
    }

  } catch (error: any) {
    steps.push({
      step: "validation",
      data: {},
      error: error.message
    });
  }

  return steps;
};

// Ex√©cuter l'exemple si appel√© directement
if (require.main === module) {
  simpleTransferExample();
}

export { simpleTransferExample }; 