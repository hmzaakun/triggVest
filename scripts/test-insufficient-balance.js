#!/usr/bin/env node
/**
 * Script de test pour les alertes de solde USDC insuffisant
 * Ce script teste les nouvelles alertes de balance dans triggVest
 */

const axios = require('axios');
const colors = require('colors');

// Configuration
const STRATEGY_ROUTER_URL = 'http://localhost:3002';
const CIRCLE_EXECUTOR_URL = 'http://localhost:3003';

// Donn√©es de test avec un montant volontairement √©lev√© pour d√©clencher l'alerte
const testUserInsufficientBalance = {
  walletAddress: '0x742d35Cc6644C30532e6391A35e7c785d0E7a123',
  strategyName: 'Test Balance Insuffisante Strategy',
  triggers: [
    {
      type: 'twitter',
      account: '@testbalance',
      keywords: ['test', 'balance', 'insufficient']
    }
  ],
  actions: [
    {
      type: 'bridge_gasless',
      targetAsset: 'USDC',
      targetChain: 'Base',
      sourceChain: 'Arbitrum',
      amount: '999999' // Montant volontairement √©lev√© pour tester l'alerte
    }
  ]
};

const testEventInsufficientBalance = {
  type: 'twitter',
  account: '@testbalance',
  content: 'Test balance insufficient alert functionality',
  timestamp: new Date().toISOString(),
  id: 'test_insufficient_' + Date.now()
};

console.log('üö® Test des alertes de solde USDC insuffisant - triggVest'.rainbow);
console.log('=' .repeat(60));

async function testInsufficientBalanceAlerts() {
  try {
    // √âtape 1: Cr√©er une strat√©gie de test avec un montant √©lev√©
    console.log('\nüìã √âtape 1: Cr√©ation de la strat√©gie avec montant √©lev√©...');
    
    const strategyResponse = await axios.post(`${STRATEGY_ROUTER_URL}/api/create-strategy`, testUserInsufficientBalance);
    
    if (strategyResponse.data.success) {
      console.log('‚úÖ Strat√©gie cr√©√©e avec succ√®s:'.green);
      console.log(`   - ID: ${strategyResponse.data.strategy.id}`);
      console.log(`   - Nom: ${strategyResponse.data.strategy.strategyName}`);
      console.log(`   - Wallet g√©n√©r√©: ${strategyResponse.data.strategy.generatedAddress}`);
      console.log(`   - Balance: ${strategyResponse.data.strategy.balance} USDC`);
      console.log(`   - Montant √† transf√©rer: 999,999 USDC (volontairement √©lev√©)`.yellow);
    } else {
      console.log('‚ùå √âchec de la cr√©ation de la strat√©gie:'.red);
      console.log(`   - Message: ${strategyResponse.data.message}`);
      return;
    }

    // √âtape 2: V√©rifier que les APIs sont actives
    console.log('\nüîç √âtape 2: V√©rification des APIs...');
    
    try {
      const routerStatus = await axios.get(`${STRATEGY_ROUTER_URL}/api/status`);
      console.log(`‚úÖ Strategy Router: ${routerStatus.data.status}`.green);
    } catch (error) {
      console.log('‚ùå Strategy Router indisponible'.red);
      return;
    }

    try {
      const executorStatus = await axios.get(`${CIRCLE_EXECUTOR_URL}/api/status`);
      console.log(`‚úÖ Circle Executor: ${executorStatus.data.status}`.green);
    } catch (error) {
      console.log('‚ùå Circle Executor indisponible'.red);
      return;
    }

    // √âtape 3: D√©clencher l'√©v√©nement qui devrait g√©n√©rer une alerte de solde insuffisant
    console.log('\nüéØ √âtape 3: D√©clenchement de l\'alerte de solde insuffisant...');
    console.log('‚ö†Ô∏è  Ceci devrait g√©n√©rer une erreur de solde insuffisant - c\'est normal!'.yellow);
    
    const eventResponse = await axios.post(`${STRATEGY_ROUTER_URL}/api/process-event`, testEventInsufficientBalance);
    
    if (eventResponse.data.success) {
      console.log('üìä √âv√©nement trait√©:'.blue);
      console.log(`   - Matches trouv√©s: ${eventResponse.data.matches.length}`);
      console.log(`   - Jobs ex√©cut√©s: ${eventResponse.data.jobResults.length}`);
      
      // Analyser les r√©sultats pour v√©rifier les alertes
      let foundInsufficientBalanceAlert = false;
      
      eventResponse.data.jobResults.forEach((job, index) => {
        if (job) {
          console.log(`\nüìã Job ${index + 1}:`.cyan);
          console.log(`   - ID: ${job.jobId}`);
          console.log(`   - Statut global: ${job.status}`);
          
          job.executions.forEach((exec, execIndex) => {
            console.log(`\n     üîç Ex√©cution ${execIndex + 1}:`.yellow);
            console.log(`       - Type: ${exec.action.type}`);
            console.log(`       - Statut: ${exec.status}`);
            
            if (exec.status === 'error' && exec.error) {
              if (exec.error.includes('Solde USDC insuffisant')) {
                foundInsufficientBalanceAlert = true;
                console.log(`       - üö® ALERTE D√âTECT√âE: ${exec.error}`.red);
                console.log(`       - ‚úÖ Test r√©ussi: L'alerte de solde insuffisant fonctionne!`.green);
                
                // Extraire les d√©tails du message d'erreur
                const errorMessage = exec.error;
                console.log(`\nüìä D√©tails de l'alerte:`.cyan);
                
                if (errorMessage.includes('disponible')) {
                  const availableMatch = errorMessage.match(/(\d+\.?\d*) USDC disponible/);
                  if (availableMatch) {
                    console.log(`       - Solde disponible: ${availableMatch[1]} USDC`);
                  }
                }
                
                if (errorMessage.includes('requis')) {
                  const requiredMatch = errorMessage.match(/(\d+\.?\d*) USDC requis/);
                  if (requiredMatch) {
                    console.log(`       - Montant requis: ${requiredMatch[1]} USDC`);
                  }
                }
                
                if (errorMessage.includes('Manque')) {
                  const shortfallMatch = errorMessage.match(/Manque (\d+\.?\d*) USDC/);
                  if (shortfallMatch) {
                    console.log(`       - Manque: ${shortfallMatch[1]} USDC`);
                  }
                }
                
              } else {
                console.log(`       - ‚ùå Autre erreur: ${exec.error}`.red);
              }
            } else if (exec.status === 'completed') {
              console.log(`       - ‚úÖ Ex√©cution r√©ussie (inattendu pour ce test)`.green);
            }
          });
        }
      });
      
      // R√©sultat du test
      if (foundInsufficientBalanceAlert) {
        console.log('\nüéâ SUCC√àS DU TEST:'.green);
        console.log('   ‚úÖ L\'alerte de solde insuffisant a √©t√© correctement d√©clench√©e');
        console.log('   ‚úÖ Le message d\'erreur contient les informations d√©taill√©es');
        console.log('   ‚úÖ Le syst√®me prot√®ge contre les transactions impossibles');
      } else {
        console.log('\n‚ùå √âCHEC DU TEST:'.red);
        console.log('   ‚ùå Aucune alerte de solde insuffisant d√©tect√©e');
        console.log('   ‚ùå Le syst√®me n\'a pas prot√©g√© contre la transaction impossible');
      }
      
    } else {
      console.log('‚ùå √âchec du traitement de l\'√©v√©nement:'.red);
      console.log(`   - Message: ${eventResponse.data.message}`);
    }

    // √âtape 4: V√©rifier l'historique des tentatives
    console.log('\nüìö √âtape 4: V√©rification de l\'historique...');
    
    const historyResponse = await axios.get(`${CIRCLE_EXECUTOR_URL}/api/executions`);
    
    if (historyResponse.data.executions.length > 0) {
      console.log(`üìä ${historyResponse.data.executions.length} ex√©cution(s) dans l\'historique:`);
      
      // Chercher les √©checs de solde insuffisant dans l'historique
      const insufficientBalanceFailures = historyResponse.data.executions.filter(exec => 
        exec.status === 'error' && exec.error && exec.error.includes('Solde USDC insuffisant')
      );
      
      if (insufficientBalanceFailures.length > 0) {
        console.log(`   ‚úÖ ${insufficientBalanceFailures.length} √©chec(s) de solde insuffisant enregistr√©(s)`.green);
        
        insufficientBalanceFailures.slice(-2).forEach((exec, index) => {
          console.log(`     üìã √âchec ${index + 1}:`.yellow);
          console.log(`       - ID: ${exec.id}`);
          console.log(`       - Type: ${exec.action.type}`);
          console.log(`       - Timestamp: ${exec.timestamp}`);
          console.log(`       - Erreur: ${exec.error.substring(0, 100)}...`);
        });
      } else {
        console.log(`   ‚ö†Ô∏è  Aucun √©chec de solde insuffisant trouv√© dans l'historique`.yellow);
      }
    } else {
      console.log('‚ö†Ô∏è  Aucune ex√©cution trouv√©e dans l\'historique'.yellow);
    }

    console.log('\nüéØ Test des alertes de solde insuffisant termin√©!'.green);
    console.log('=' .repeat(60));

  } catch (error) {
    console.error('‚ùå Erreur lors du test:'.red);
    console.error(`   - Message: ${error.message}`);
    if (error.response) {
      console.error(`   - Status: ${error.response.status}`);
      console.error(`   - Data: ${JSON.stringify(error.response.data, null, 2)}`);
    }
  }
}

// Fonction pour afficher l'aide
function showHelp() {
  console.log('\nüìñ Aide - Test des alertes de solde insuffisant'.cyan);
  console.log('=' .repeat(60));
  console.log('Ce script teste sp√©cifiquement les alertes de solde USDC insuffisant:');
  console.log('');
  console.log('üéØ Objectif du test:');
  console.log('   - V√©rifier que le syst√®me d√©tecte les soldes insuffisants');
  console.log('   - S\'assurer que les messages d\'erreur sont informatifs');
  console.log('   - Confirmer que les transactions impossibles sont bloqu√©es');
  console.log('');
  console.log('üîß Pr√©requis:');
  console.log('   - Strategy Router API sur le port 3002');
  console.log('   - Circle Executor API sur le port 3003');
  console.log('   - Base de donn√©es Supabase configur√©e');
  console.log('');
  console.log('üöÄ Utilisation:');
  console.log('   node scripts/test-insufficient-balance.js');
  console.log('   node scripts/test-insufficient-balance.js --help');
  console.log('');
  console.log('‚ö†Ô∏è  Note:');
  console.log('   Ce test utilise intentionnellement un montant √©lev√© (999,999 USDC)');
  console.log('   pour d√©clencher l\'alerte de solde insuffisant. C\'est normal!');
  console.log('');
}

// Point d'entr√©e
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  showHelp();
} else {
  testInsufficientBalanceAlerts().catch(console.error);
} 