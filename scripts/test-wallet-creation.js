const axios = require('axios');

const STRATEGY_API = 'http://localhost:3002';

// Simulation d'adresses wallet utilisateurs
const mockWalletAddresses = [
    '0x1234567890abcdef1234567890abcdef12345678',
    '0xabcdef1234567890abcdef1234567890abcdef12',
    '0x9876543210fedcba9876543210fedcba98765432'
];

// Test de cr√©ation d'une strat√©gie avec wallet (API compl√®te)
async function testCreateStrategyWithWallet() {
    console.log('üß™ Test: Cr√©ation de strat√©gie avec wallet (API compl√®te)\n');
    
    try {
        // Donn√©es de la strat√©gie
        const strategyData = {
            userWalletAddress: mockWalletAddresses[0],
            strategyName: 'Test Strategy API Complete',
            triggers: [{
                type: 'twitter',
                account: '@elonmusk',
                keywords: ['bitcoin', 'crypto', 'moon']
            }],
            actions: [{
                type: 'convert_all',
                targetAsset: 'BTC',
                targetChain: 'Ethereum'
            }]
        };
        
        console.log('üì§ Envoi de la requ√™te...');
        const response = await axios.post(`${STRATEGY_API}/api/create-strategy-with-wallet`, strategyData);
        
        if (response.data.success) {
            console.log('‚úÖ Strat√©gie cr√©√©e avec succ√®s !');
            console.log('üìã D√©tails:');
            console.log(`   - ID: ${response.data.strategy.id}`);
            console.log(`   - Nom: ${response.data.strategy.strategyName}`);
            console.log(`   - Wallet utilisateur: ${response.data.strategy.userWalletAddress}`);
            console.log(`   - Wallet g√©n√©r√©: ${response.data.strategy.wallet.address}`);
            console.log(`   - Wallet ID: ${response.data.strategy.wallet.id}`);
            
            return response.data.strategy;
        } else {
            console.log('‚ùå √âchec de la cr√©ation:', response.data.error);
        }
        
    } catch (error) {
        console.log('‚ùå Erreur lors de la cr√©ation:', error.message);
        if (error.response) {
            console.log('üìÑ R√©ponse serveur:', error.response.data);
        }
    }
}

// Test de cr√©ation d'une strat√©gie simple (API simplifi√©e)
async function testCreateSimpleStrategy() {
    console.log('\nüß™ Test: Cr√©ation de strat√©gie simple (API simplifi√©e)\n');
    
    try {
        // Donn√©es de la strat√©gie simple
        const strategyData = {
            userWalletAddress: mockWalletAddresses[1],
            strategyName: 'Trump Trade Hackathon',
            triggerAccount: '@realdonaldtrump',
            keywords: ['economy', 'crash', 'recession'],
            targetAsset: 'USDC',
            targetChain: 'Ethereum'
        };
        
        console.log('üì§ Envoi de la requ√™te simple...');
        const response = await axios.post(`${STRATEGY_API}/api/create-strategy`, strategyData);
        
        if (response.data.success) {
            console.log('‚úÖ Strat√©gie simple cr√©√©e avec succ√®s !');
            console.log('üìã D√©tails:');
            console.log(`   - ID: ${response.data.strategy.id}`);
            console.log(`   - Nom: ${response.data.strategy.strategyName}`);
            console.log(`   - Wallet utilisateur: ${response.data.strategy.userWalletAddress}`);
            console.log(`   - Compte Twitter: ${response.data.strategy.triggerAccount}`);
            console.log(`   - Mots-cl√©s: ${response.data.strategy.keywords.join(', ')}`);
            console.log(`   - Asset cible: ${response.data.strategy.targetAsset}`);
            console.log(`   - Cha√Æne cible: ${response.data.strategy.targetChain}`);
            console.log(`   - Wallet g√©n√©r√©: ${response.data.strategy.wallet.address}`);
            
            return response.data.strategy;
        } else {
            console.log('‚ùå √âchec de la cr√©ation:', response.data.error);
        }
        
    } catch (error) {
        console.log('‚ùå Erreur lors de la cr√©ation:', error.message);
        if (error.response) {
            console.log('üìÑ R√©ponse serveur:', error.response.data);
        }
    }
}

// Test de r√©cup√©ration des wallets utilisateur
async function testGetUserWallets(walletAddress) {
    console.log(`\nüß™ Test: R√©cup√©ration des wallets pour ${walletAddress.slice(0, 8)}...\n`);
    
    try {
        console.log('üì§ R√©cup√©ration des wallets...');
        const response = await axios.get(`${STRATEGY_API}/api/user-wallets/${walletAddress}`);
        
        if (response.data.success) {
            console.log(`‚úÖ ${response.data.wallets.length} wallets trouv√©s`);
            
            response.data.wallets.forEach((wallet, index) => {
                console.log(`\nüíº Wallet ${index + 1}:`);
                console.log(`   - Strat√©gie: ${wallet.strategyName}`);
                console.log(`   - Adresse: ${wallet.generatedAddress}`);
                console.log(`   - Balance: ${wallet.balance} ETH`);
                console.log(`   - Status: ${wallet.isActive ? 'üü¢ Actif' : 'üî¥ Inactif'}`);
            });
            
            return response.data.wallets;
        } else {
            console.log('‚ùå √âchec de la r√©cup√©ration:', response.data.error);
        }
        
    } catch (error) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration:', error.message);
    }
}

// Test de traitement d'un √©v√©nement
async function testProcessEvent() {
    console.log('\nüß™ Test: Traitement d\'√©v√©nement avec matching\n');
    
    try {
        const eventData = {
            type: 'twitter',
            account: '@elonmusk',
            content: 'Bitcoin is going to the moon! üöÄ #crypto',
            timestamp: new Date().toISOString(),
            id: `test_event_${Date.now()}`
        };
        
        console.log('üì§ Envoi de l\'√©v√©nement...');
        const response = await axios.post(`${STRATEGY_API}/api/process-event`, eventData);
        
        if (response.data.success) {
            console.log('‚úÖ √âv√©nement trait√© avec succ√®s !');
            console.log(`üìä ${response.data.matchedStrategies} strat√©gies match√©es`);
            
            if (response.data.users && response.data.users.length > 0) {
                console.log('\nüë• Utilisateurs concern√©s:');
                response.data.users.forEach((user, index) => {
                    console.log(`   ${index + 1}. ${user.username || 'Anonyme'}`);
                    console.log(`      - Wallet: ${user.walletAddress}`);
                    console.log(`      - Strat√©gie: ${user.strategyName}`);
                });
            }
            
            return response.data;
        } else {
            console.log('‚ùå √âchec du traitement:', response.data.error);
        }
        
    } catch (error) {
        console.log('‚ùå Erreur lors du traitement:', error.message);
    }
}

// Test de l'API status
async function testApiStatus() {
    console.log('\nüß™ Test: Status de l\'API\n');
    
    try {
        const response = await axios.get(`${STRATEGY_API}/api/status`);
        
        if (response.data.status) {
            console.log('‚úÖ API accessible');
            console.log(`üìä Status: ${response.data.status}`);
            console.log(`üîó Trigger API: ${response.data.connectedToTriggerApi ? '‚úÖ' : '‚ùå'}`);
            console.log(`üéØ Strat√©gies: ${response.data.strategiesCount}`);
        }
        
    } catch (error) {
        console.log('‚ùå API non accessible:', error.message);
    }
}

// Fonction principale
async function runTests() {
    console.log('üéØ TriggVest - Tests API Backend (Hackathon Version)\n');
    console.log('=================================================\n');
    
    // Test 0: Status API
    await testApiStatus();
    await sleep(1000);
    
    // Test 1: Cr√©ation de strat√©gie compl√®te avec wallet
    await testCreateStrategyWithWallet();
    await sleep(1000);
    
    // Test 2: Cr√©ation de strat√©gie simple
    await testCreateSimpleStrategy();
    await sleep(1000);
    
    // Test 3: R√©cup√©ration des wallets pour le premier utilisateur
    await testGetUserWallets(mockWalletAddresses[0]);
    await sleep(1000);
    
    // Test 4: R√©cup√©ration des wallets pour le deuxi√®me utilisateur
    await testGetUserWallets(mockWalletAddresses[1]);
    await sleep(1000);
    
    // Test 5: Traitement d'√©v√©nement
    await testProcessEvent();
    
    console.log('\nüéâ Tests termin√©s !');
    console.log('\nüìã R√©sum√©:');
    console.log('   - ‚úÖ Cr√©ation de strat√©gies sans signature');
    console.log('   - ‚úÖ G√©n√©ration automatique de wallets');
    console.log('   - ‚úÖ Matching d\'√©v√©nements');
    console.log('   - ‚úÖ API simplifi√©e pour hackathon');
}

// Fonction helper pour attendre
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Ex√©cuter les tests
runTests().catch(console.error); 