import express from 'express';
import cors from 'cors';
import axios from 'axios';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';
import { Strategy, TweetEvent, Job, JobResponse, ApiStatus } from './types.js';
import { 
  createStrategyWithWallet, 
  getUserStrategies, 
  getActiveStrategies,
  getStrategyWallet 
} from './wallet-manager';
import { getSupportedChains, getSmartAccountInfo, createSmartAccount } from './smart-account-manager';

dotenv.config();

/**
 * =====================================
 * STRATEGY ROUTER API - TRIGGVEST
 * =====================================
 * 
 * Cette API est le c≈ìur de TriggVest. Elle :
 * - G√®re les strat√©gies des utilisateurs
 * - Traite les √©v√©nements re√ßus (tweets, etc.)
 * - D√©termine quelles strat√©gies d√©clencher
 * - Envoie les jobs au Circle Executor
 * - G√®re les wallets et Smart Accounts
 * 
 * Port par d√©faut : 3002
 * 
 * Flux principal :
 * 1. Trigger API ‚Üí Strategy Router (√©v√©nements)
 * 2. Strategy Router ‚Üí Circle Executor (jobs)
 * 3. Circle Executor ‚Üí Blockchain (ex√©cution)
 * 
 * =====================================
 */

// Configuration de l'application
const app = express();
const PORT = process.env.PORT || 3002;
const prisma = new PrismaClient();

// =====================================
// MIDDLEWARE
// =====================================

app.use(cors());
app.use(express.json());

// =====================================
// MOTEUR DE CORRESPONDANCE
// =====================================

/**
 * V√©rifie si un √©v√©nement correspond √† un trigger
 * 
 * @param event - √âv√©nement re√ßu
 * @param trigger - Trigger de strat√©gie
 * @returns true si l'√©v√©nement correspond au trigger
 */
function matchesTrigger(event: TweetEvent, trigger: any): boolean {
  // V√©rifier le type d'√©v√©nement
  if (event.type !== trigger.type) return false;
  
  if (trigger.type === 'twitter') {
    // V√©rifier si le compte correspond
    if (trigger.account && event.account !== trigger.account) return false;
    
    // V√©rifier si au moins un mot-cl√© est pr√©sent
    if (trigger.keywords && trigger.keywords.length > 0) {
      const content = event.content.toLowerCase();
      return trigger.keywords.some((keyword: string) => 
        content.includes(keyword.toLowerCase())
      );
    }
  }
  
  return true;
}

// =====================================
// GESTION DES DONN√âES
// =====================================

/**
 * Sauvegarde un √©v√©nement en base de donn√©es
 * 
 * @param event - √âv√©nement √† sauvegarder
 * @returns ID de l'√©v√©nement sauvegard√©
 */
async function saveEvent(event: TweetEvent): Promise<string> {
  try {
    const savedEvent = await prisma.event.create({
      data: {
        type: event.type,
        account: event.account,
        content: event.content,
        metadata: {
          timestamp: event.timestamp,
          id: event.id
        }
      }
    });
    
    console.log(`‚úÖ [DB] √âv√©nement sauvegard√©: ${savedEvent.id}`);
    return savedEvent.id;
  } catch (error) {
    console.error('‚ùå [DB] Erreur lors de la sauvegarde de l\'√©v√©nement:', error);
    throw error;
  }
}

/**
 * Sauvegarde une ex√©cution en base de donn√©es
 * 
 * @param strategy - Strat√©gie ex√©cut√©e
 * @param eventId - ID de l'√©v√©nement d√©clencheur
 * @param actionId - ID de l'action ex√©cut√©e
 * @param jobResult - R√©sultat du job
 * @returns ID de l'ex√©cution sauvegard√©e
 */
async function saveExecution(
  strategy: any, 
  eventId: string, 
  actionId: string,
  jobResult: JobResponse | null
): Promise<string> {
  try {
    const execution = await prisma.execution.create({
      data: {
        userId: strategy.userId,
        strategyId: strategy.id,
        eventId: eventId,
        actionId: actionId,
        status: jobResult ? 'completed' : 'failed',
        txHash: jobResult?.txHash || null,
        errorMessage: jobResult ? null : 'Failed to execute job'
      }
    });
    
    console.log(`‚úÖ [DB] Ex√©cution sauvegard√©e: ${execution.id}`);
    return execution.id;
  } catch (error) {
    console.error('‚ùå [DB] Erreur lors de la sauvegarde de l\'ex√©cution:', error);
    throw error;
  }
}

// =====================================
// COMMUNICATION AVEC CIRCLE EXECUTOR
// =====================================

/**
 * Envoie un job au Circle Executor API
 * 
 * @param strategy - Strat√©gie √† ex√©cuter
 * @param event - √âv√©nement d√©clencheur
 * @returns R√©sultat du job ou null si √©chec
 */
async function sendJobToCircleExecutor(strategy: any, event: TweetEvent): Promise<JobResponse | null> {
  console.log(`üì§ [CIRCLE] Envoi du job pour la strat√©gie ${strategy.strategyName}`);
  
  // R√©cup√©rer la cl√© priv√©e de la strat√©gie
  const strategyWallet = await getStrategyWallet(strategy.id);
  const privateKey = strategyWallet.wallet?.privateKey.replace('0x', '');
  
  const job: Job = {
    strategyId: strategy.id,
    userId: strategy.userId,
    strategyName: strategy.strategyName,
    triggeredBy: event,
    actions: strategy.actions,
    timestamp: new Date().toISOString(),
    strategyPrivateKey: privateKey
  };
  
  try {
    // Format attendu par Circle Executor API pour bridge_gasless
    const circleJob = {
      type: 'bridge_gasless',
      smartAccount: strategy.smartAccountAddress || strategy.generatedAddress,
      fromChain: 'arbitrum', // Source: Arbitrum Sepolia
      toChain: 'base',       // Destination: Base Sepolia
      amount: strategy.actions[0]?.parameters?.amount || '1', // Montant depuis les param√®tres
      token: 'USDC'
    };

    console.log('üì§ [CIRCLE] Sending bridge job:', circleJob);
    
    const response = await axios.post('http://localhost:3003/process-job', circleJob);
    console.log(`‚úÖ [CIRCLE] Bridge job envoy√© avec succ√®s`);
    
    // Transformer la r√©ponse au format JobResponse attendu
    return {
      jobId: `bridge_${Date.now()}`,
      status: response.data.success ? 'completed' : 'failed',
      result: response.data.result,
      timestamp: new Date().toISOString(),
      txHash: response.data.result?.mintTxHash || null
    };
  } catch (error) {
    console.error('‚ùå [CIRCLE] Erreur lors de l\'envoi du bridge job:', error instanceof Error ? error.message : 'Unknown error');
    return null;
  }
}

// =====================================
// MOTEUR DE TRAITEMENT D'√âV√âNEMENTS
// =====================================

/**
 * Traite un √©v√©nement re√ßu et d√©clenche les strat√©gies correspondantes
 * 
 * Ce processus comprend :
 * 1. Sauvegarde de l'√©v√©nement
 * 2. R√©cup√©ration des strat√©gies actives
 * 3. V√©rification des correspondances
 * 4. Envoi des jobs au Circle Executor
 * 5. Sauvegarde des ex√©cutions
 * 
 * @param event - √âv√©nement √† traiter
 * @returns R√©sultat du traitement
 */
async function processEvent(event: TweetEvent): Promise<{ 
  matches: any[]; 
  jobResults: (JobResponse | null)[]; 
  userDetails: any[] 
}> {
  console.log(`üîÑ [EVENT] Traitement de l'√©v√©nement: ${event.type}`);
  console.log(`üìç [EVENT] Compte: ${event.account}`);
  console.log(`üìù [EVENT] Contenu: ${event.content}`);
  
  // Sauvegarder l'√©v√©nement en base de donn√©es
  const eventId = await saveEvent(event);
  
  // R√©cup√©rer les strat√©gies actives depuis la base de donn√©es
  const strategies = await getActiveStrategies();
  console.log(`üìä [EVENT] ${strategies.length} strat√©gies actives r√©cup√©r√©es`);
  
  const matchedStrategies: any[] = [];
  const jobResults: (JobResponse | null)[] = [];
  const userDetails: any[] = [];
  
  // V√©rifier chaque strat√©gie
  for (const strategy of strategies) {
    console.log(`üîç [EVENT] V√©rification de la strat√©gie: ${strategy.strategyName}`);
    
    for (const trigger of strategy.triggers) {
      if (matchesTrigger(event, trigger)) {
        matchedStrategies.push(strategy);
        
        console.log(`‚úÖ [EVENT] MATCH trouv√©: ${strategy.strategyName}`);
        console.log(`üë§ [EVENT] Utilisateur: ${strategy.userId}`);
        console.log(`üîê [EVENT] Wallet g√©n√©r√©: ${strategy.generatedAddress}`);
        
        // R√©cup√©rer les d√©tails de l'utilisateur
        const userInfo = await prisma.user.findUnique({
          where: { id: strategy.userId },
          select: {
            id: true,
            walletAddress: true,
            username: true,
            email: true
          }
        });
        
        if (userInfo) {
          userDetails.push({
            userId: userInfo.id,
            walletAddress: userInfo.walletAddress,
            username: userInfo.username,
            email: userInfo.email,
            strategyId: strategy.id,
            strategyName: strategy.strategyName,
            generatedWallet: strategy.generatedAddress
          });
        }
        
        // Envoyer le job √† Circle Executor
        const jobResult = await sendJobToCircleExecutor(strategy, event);
        jobResults.push(jobResult);
        
        // Sauvegarder l'ex√©cution en base de donn√©es
        const firstAction = strategy.actions[0];
        if (firstAction) {
          // R√©cup√©rer l'ID de l'action depuis la base de donn√©es
          const actionInDb = await prisma.action.findFirst({
            where: {
              strategyId: strategy.id,
              type: firstAction.type,
              targetAsset: firstAction.targetAsset,
              targetChain: firstAction.targetChain
            }
          });
          
          if (actionInDb) {
            await saveExecution(strategy, eventId, actionInDb.id, jobResult);
          }
        }
        
        break; // Une seule fois par strat√©gie
      }
    }
  }
  
  if (matchedStrategies.length === 0) {
    console.log('‚ùå [EVENT] Aucun match trouv√© pour cet √©v√©nement');
  } else {
    console.log(`üéâ [EVENT] ${matchedStrategies.length} strat√©gie(s) d√©clench√©e(s)`);
  }
  
  return { matches: matchedStrategies, jobResults, userDetails };
}

// =====================================
// ROUTES API REST
// =====================================

/**
 * POST /api/create-strategy
 * 
 * Cr√©e une nouvelle strat√©gie avec wallet int√©gr√© et Smart Account optionnel
 * 
 * @route POST /api/create-strategy
 * @param {string} req.body.userWalletAddress - Adresse wallet de l'utilisateur
 * @param {string} req.body.strategyName - Nom de la strat√©gie
 * @param {Array} req.body.triggers - Liste des triggers (max 2)
 * @param {Array} req.body.actions - Liste des actions
 * @param {string} [req.body.smartAccountChain] - Cha√Æne pour cr√©er le Smart Account (optionnel)
 * 
 * @returns {Object} Strat√©gie cr√©√©e avec d√©tails
 * 
 * @example
 * POST /api/create-strategy
 * {
 *   "userWalletAddress": "0x1234...",
 *   "strategyName": "Bridge sur tweet Elon",
 *   "triggers": [
 *     {
 *       "type": "twitter",
 *       "account": "@elonmusk",
 *       "keywords": ["bitcoin", "moon"]
 *     }
 *   ],
 *   "actions": [
 *     {
 *       "type": "bridge_gasless",
 *       "targetAsset": "USDC",
 *       "targetChain": "Base"
 *     }
 *   ],
 *   "smartAccountChain": "base-sepolia"
 * }
 */
app.post('/api/create-strategy', async (req: express.Request, res: express.Response) => {
  try {
    const { 
      userWalletAddress, 
      strategyName, 
      triggers,
      actions,
      smartAccountChain // Optionnel: cha√Æne pour cr√©er le smart account
    } = req.body;
    
    console.log(`üìù [STRATEGY] Cr√©ation de strat√©gie: ${strategyName}`);
    console.log(`üë§ [STRATEGY] Utilisateur: ${userWalletAddress}`);
    console.log(`üéØ [STRATEGY] ${triggers?.length || 0} trigger(s), ${actions?.length || 0} action(s)`);
    
    // Validation des champs requis
    if (!userWalletAddress || !strategyName || !triggers || !actions) {
      console.error('‚ùå [STRATEGY] Champs requis manquants');
      return res.status(400).json({
        success: false,
        error: 'Champs requis manquants',
        message: 'userWalletAddress, strategyName, triggers, actions sont requis'
      });
    }

    // Validation : max 2 triggers
    if (triggers.length > 2) {
      console.error('‚ùå [STRATEGY] Trop de triggers');
      return res.status(400).json({
        success: false,
        error: 'Limite de triggers d√©pass√©e',
        message: 'Maximum 2 triggers autoris√©s par strat√©gie'
      });
    }
    
    if (smartAccountChain) {
      console.log(`üîê [STRATEGY] Smart Account sera cr√©√© sur: ${smartAccountChain}`);
    }
    
    const result = await createStrategyWithWallet({
      userWalletAddress,
      strategyName,
      triggers,
      actions,
      smartAccountChain
    });
    
    if (!result.success) {
      console.error(`‚ùå [STRATEGY] √âchec de cr√©ation: ${result.message}`);
      return res.status(500).json({
        success: false,
        error: '√âchec de cr√©ation de strat√©gie',
        message: result.message
      });
    }
    
    console.log(`‚úÖ [STRATEGY] Strat√©gie cr√©√©e avec succ√®s: ${result.strategy?.id}`);
    console.log(`üîê [STRATEGY] Wallet g√©n√©r√©: ${result.strategy?.generatedAddress}`);
    if (result.strategy?.smartAccount) {
      console.log(`üîê [STRATEGY] Smart Account cr√©√©: ${result.strategy.smartAccount.address}`);
    }
    
    res.json({
      success: true,
      strategy: result.strategy,
      message: result.message
    });
    
  } catch (error) {
    console.error('‚ùå [STRATEGY] Erreur lors de la cr√©ation:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la cr√©ation de la strat√©gie',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * POST /api/smart-account
 * 
 * Cr√©e un Smart Account pour une strat√©gie existante
 * 
 * @route POST /api/smart-account
 * @param {string} req.body.strategyId - ID de la strat√©gie
 * @param {string} req.body.chain - Cha√Æne blockchain (arbitrum, base, etc.)
 * 
 * @returns {Object} Smart Account cr√©√©
 * 
 * @example
 * POST /api/smart-account
 * {
 *   "strategyId": "cmcr4rpa50002tw6x1f4rpdew",
 *   "chain": "arbitrum"
 * }
 */
app.post('/api/smart-account', async (req: express.Request, res: express.Response) => {
  try {
    const { strategyId, chain } = req.body;
    
    console.log(`üîÑ [SMART_ACCOUNT] Cr√©ation pour la strat√©gie: ${strategyId} sur ${chain}`);
    
    // Validation des champs requis
    if (!strategyId || !chain) {
      console.error('‚ùå [SMART_ACCOUNT] Champs requis manquants');
      return res.status(400).json({
        success: false,
        error: 'Champs requis manquants',
        message: 'strategyId, chain sont requis'
      });
    }

    // V√©rifier que la strat√©gie existe
    const strategy = await prisma.strategy.findUnique({
      where: { id: strategyId }
    });

    if (!strategy) {
      console.error(`‚ùå [SMART_ACCOUNT] Strat√©gie ${strategyId} non trouv√©e`);
      return res.status(404).json({
        success: false,
        error: 'Strat√©gie non trouv√©e',
        message: `Aucune strat√©gie avec l'ID "${strategyId}" n'a √©t√© trouv√©e`
      });
    }

    // üéØ DEMO MODE: Utiliser le Smart Account pr√©d√©fini
    const DEMO_SMART_ACCOUNT = {
      address: '0x30FaA798B5d332A733150bCA1556D7BeDA2CeB87',
      owner: '0x9c8C8a7a5F4F1e0aE8c9d5b3f2E1A7b6c3d4e5f6',
      chain: chain,
      factory: '0x0000000000000000000000000000000000000000',
      created: new Date(),
      balance: '5000000' // 5 USDC (6 decimals)
    };

    console.log(`üéØ [DEMO] Utilisation du Smart Account pr√©d√©fini: ${DEMO_SMART_ACCOUNT.address}`);

    // V√©rifier si un Smart Account existe d√©j√†
    if (strategy.smartAccountAddress) {
      console.log(`‚úÖ [SMART_ACCOUNT] Smart Account existe d√©j√†: ${strategy.smartAccountAddress}`);
      return res.json({
        success: true,
        message: 'Smart Account existe d√©j√†',
        smartAccount: {
          address: strategy.smartAccountAddress,
          owner: strategy.smartAccountOwner,
          chain: strategy.smartAccountChain,
          factory: strategy.smartAccountFactory,
          created: strategy.smartAccountCreated,
          balance: strategy.smartAccountBalance.toString()
        }
      });
    }

    // Pour la d√©monstration, utiliser directement le Smart Account pr√©d√©fini
    await prisma.strategy.update({
      where: { id: strategyId },
      data: {
        smartAccountAddress: DEMO_SMART_ACCOUNT.address,
        smartAccountOwner: DEMO_SMART_ACCOUNT.owner,
        smartAccountChain: DEMO_SMART_ACCOUNT.chain,
        smartAccountFactory: DEMO_SMART_ACCOUNT.factory,
        smartAccountCreated: true,
        smartAccountBalance: parseFloat(DEMO_SMART_ACCOUNT.balance)
      }
    });

    console.log(`‚úÖ [DEMO] Smart Account pr√©d√©fini assign√© √† la strat√©gie: ${strategyId}`);

    return res.json({
      success: true,
      message: 'Smart Account pr√©d√©fini assign√© avec succ√®s',
      smartAccount: DEMO_SMART_ACCOUNT
    });

    // R√©cup√©rer la cl√© priv√©e de la strat√©gie (d√©chiffr√©e)
    const strategyWallet = await getStrategyWallet(strategyId);
    
    if (!strategyWallet.wallet) {
      console.error(`‚ùå [SMART_ACCOUNT] Impossible de r√©cup√©rer le wallet de la strat√©gie ${strategyId}`);
      return res.status(500).json({
        success: false,
        error: 'Erreur wallet',
        message: 'Impossible de r√©cup√©rer le wallet de la strat√©gie'
      });
    }

    // Cr√©er le Smart Account avec la cl√© priv√©e d√©chiffr√©e
    const smartAccountResult = await createSmartAccount({
      chain,
      ownerPrivateKey: strategyWallet.wallet.privateKey,
      strategyId
    });

    if (!smartAccountResult.success) {
      console.error(`‚ùå [SMART_ACCOUNT] Erreur cr√©ation: ${smartAccountResult.message}`);
      return res.status(500).json({
        success: false,
        error: 'Erreur lors de la cr√©ation du Smart Account',
        message: smartAccountResult.message
      });
    }

    console.log(`‚úÖ [SMART_ACCOUNT] Smart Account cr√©√©: ${smartAccountResult.smartAccount?.address}`);

    res.json({
      success: true,
      message: 'Smart Account cr√©√© avec succ√®s',
      smartAccount: smartAccountResult.smartAccount
    });

  } catch (error) {
    console.error('‚ùå [SMART_ACCOUNT] Erreur lors de la cr√©ation:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la cr√©ation du Smart Account',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * GET /api/user-strategies/:walletAddress
 * 
 * R√©cup√®re toutes les strat√©gies d'un utilisateur
 * 
 * @route GET /api/user-strategies/:walletAddress
 * @param {string} params.walletAddress - Adresse wallet de l'utilisateur
 * 
 * @returns {Object} Liste des strat√©gies de l'utilisateur
 * 
 * @example
 * GET /api/user-strategies/0x1234...
 */
app.get('/api/user-strategies/:walletAddress', async (req: express.Request, res: express.Response) => {
  try {
    const { walletAddress } = req.params;
    
    console.log(`üîç [USER_STRATEGIES] R√©cup√©ration pour: ${walletAddress}`);
    
    const strategies = await getUserStrategies(walletAddress);
    
    console.log(`üìä [USER_STRATEGIES] ${strategies.length} strat√©gie(s) trouv√©e(s)`);
    
    res.json({
      success: true,
      walletAddress,
      strategies,
      total: strategies.length
    });
    
  } catch (error) {
    console.error('‚ùå [USER_STRATEGIES] Erreur lors de la r√©cup√©ration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des strat√©gies',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * POST /api/process-event
 * 
 * Traite un √©v√©nement re√ßu du Trigger CLI
 * 
 * @route POST /api/process-event
 * @param {TweetEvent} req.body - √âv√©nement √† traiter
 * @param {string} req.body.type - Type d'√©v√©nement (ex: 'twitter')
 * @param {string} req.body.account - Compte source (ex: '@elonmusk')
 * @param {string} req.body.content - Contenu de l'√©v√©nement
 * 
 * @returns {Object} R√©sultat du traitement avec strat√©gies d√©clench√©es
 * 
 * @example
 * POST /api/process-event
 * {
 *   "type": "twitter",
 *   "account": "@elonmusk",
 *   "content": "Bitcoin to the moon!",
 *   "timestamp": "2025-01-05T10:00:00Z",
 *   "id": "tweet_123"
 * }
 */
app.post('/api/process-event', async (req: express.Request<{}, any, TweetEvent>, res: express.Response) => {
  try {
    const event = req.body;
    
    console.log(`üì® [PROCESS_EVENT] √âv√©nement re√ßu du CLI`);
    console.log(`üìç [PROCESS_EVENT] ${event.account}: "${event.content}"`);
    
    // Validation basique
    if (!event.type || !event.account || !event.content) {
      console.error('‚ùå [PROCESS_EVENT] Champs requis manquants');
      return res.status(400).json({
        success: false,
        error: 'Champs requis manquants',
        message: 'type, account, content sont requis'
      });
    }
    
    // Traiter l'√©v√©nement
    const result = await processEvent(event);
    
    console.log(`üéØ [PROCESS_EVENT] ${result.matches.length} strat√©gie(s) d√©clench√©e(s)`);
    console.log(`üìä [PROCESS_EVENT] ${result.jobResults.filter(r => r !== null).length} job(s) envoy√©(s)`);
    
    // R√©ponse d√©taill√©e avec informations utilisateur
    res.json({
      success: true,
      event,
      matchedStrategies: result.matches.length,
      strategies: result.matches.map(s => ({
        id: s.id,
        name: s.strategyName,
        userId: s.userId,
        generatedWallet: s.generatedAddress
      })),
      users: result.userDetails,
      jobResults: result.jobResults.filter(r => r !== null),
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå [PROCESS_EVENT] Erreur lors du traitement:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du traitement de l\'√©v√©nement',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * GET /api/supported-chains
 * 
 * R√©cup√®re la liste des cha√Ænes support√©es pour les Smart Accounts
 * 
 * @route GET /api/supported-chains
 * @returns {Object} Liste des cha√Ænes support√©es
 * 
 * @example
 * GET /api/supported-chains
 * {
 *   "success": true,
 *   "supportedChains": ["eth-sepolia", "base-sepolia", "arb-sepolia"],
 *   "total": 3
 * }
 */
app.get('/api/supported-chains', async (req: express.Request, res: express.Response) => {
  try {
    console.log(`üîç [SUPPORTED_CHAINS] R√©cup√©ration des cha√Ænes support√©es`);
    
    const supportedChains = getSupportedChains();
    
    console.log(`üìä [SUPPORTED_CHAINS] ${supportedChains.length} cha√Æne(s) support√©e(s)`);
    
    res.json({
      success: true,
      supportedChains,
      total: supportedChains.length
    });
    
  } catch (error) {
    console.error('‚ùå [SUPPORTED_CHAINS] Erreur lors de la r√©cup√©ration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des cha√Ænes support√©es',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * GET /api/smart-account/:strategyId
 * 
 * R√©cup√®re les informations d'un Smart Account pour une strat√©gie
 * 
 * @route GET /api/smart-account/:strategyId
 * @param {string} params.strategyId - ID de la strat√©gie
 * 
 * @returns {Object} Informations du Smart Account
 * 
 * @example
 * GET /api/smart-account/strategy_123
 */
app.get('/api/smart-account/:strategyId', async (req: express.Request, res: express.Response) => {
  try {
    const { strategyId } = req.params;
    
    console.log(`üîç [SMART_ACCOUNT] R√©cup√©ration pour la strat√©gie: ${strategyId}`);
    
    const smartAccountInfo = await getSmartAccountInfo(strategyId);
    
    if (!smartAccountInfo) {
      console.error('‚ùå [SMART_ACCOUNT] Smart Account non trouv√©');
      return res.status(404).json({
        success: false,
        error: 'Smart Account non trouv√©',
        message: 'Smart Account non trouv√© ou non cr√©√© pour cette strat√©gie'
      });
    }
    
    console.log(`‚úÖ [SMART_ACCOUNT] Smart Account trouv√©: ${smartAccountInfo.address}`);
    
    res.json({
      success: true,
      smartAccount: smartAccountInfo
    });
    
  } catch (error) {
    console.error('‚ùå [SMART_ACCOUNT] Erreur lors de la r√©cup√©ration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration du Smart Account',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * GET /api/strategies
 * 
 * R√©cup√®re toutes les strat√©gies actives
 * 
 * @route GET /api/strategies
 * @returns {Object} Liste de toutes les strat√©gies actives
 * 
 * @example
 * GET /api/strategies
 */
app.get('/api/strategies', async (req: express.Request, res: express.Response) => {
  try {
    console.log(`üîç [STRATEGIES] R√©cup√©ration de toutes les strat√©gies actives`);
    
    const strategies = await getActiveStrategies();
    
    console.log(`üìä [STRATEGIES] ${strategies.length} strat√©gie(s) active(s)`);
    
    res.json({
      success: true,
      strategies,
      total: strategies.length
    });
  } catch (error) {
    console.error('‚ùå [STRATEGIES] Erreur lors de la r√©cup√©ration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des strat√©gies',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * GET /api/strategy/:id
 * 
 * R√©cup√®re une strat√©gie sp√©cifique par son ID
 * 
 * @route GET /api/strategy/:id
 * @param {string} id - ID de la strat√©gie
 * @returns {Object} Strat√©gie trouv√©e
 * 
 * @example
 * GET /api/strategy/cmcr28ruz0002xumjlctuylsw
 */
app.get('/api/strategy/:id', async (req: express.Request, res: express.Response) => {
  try {
    const { id } = req.params;
    console.log(`üîç [STRATEGY] R√©cup√©ration de la strat√©gie: ${id}`);
    
    const strategy = await prisma.strategy.findUnique({
      where: { id },
      include: {
        user: {
          select: {
            id: true,
            walletAddress: true,
            createdAt: true
          }
        },
        triggers: true,
        actions: true,
        executions: {
          take: 10,
          orderBy: { createdAt: 'desc' }
        }
      }
    });
    
    if (!strategy) {
      console.log(`‚ùå [STRATEGY] Strat√©gie ${id} non trouv√©e`);
      return res.status(404).json({
        success: false,
        error: 'Strat√©gie non trouv√©e',
        message: `Aucune strat√©gie avec l'ID "${id}" n'a √©t√© trouv√©e`
      });
    }
    
    console.log(`‚úÖ [STRATEGY] Strat√©gie trouv√©e: ${strategy.strategyName}`);
    
    res.json({
      success: true,
      strategy: {
        id: strategy.id,
        name: strategy.strategyName,
        description: strategy.strategyName, // Utiliser le nom comme description temporaire
        status: strategy.isActive ? 'active' : 'inactive',
        userWalletAddress: strategy.user.walletAddress,
        generatedAddress: strategy.generatedAddress,
        triggers: strategy.triggers,
        actions: strategy.actions.map(action => ({
          ...action,
          amount: action.parameters && typeof action.parameters === 'object' && 
                  'amount' in action.parameters ? 
                  String(action.parameters.amount) : 
                  '0'
        })),
        executions: strategy.executions,
        createdAt: strategy.createdAt,
        updatedAt: strategy.updatedAt
      }
    });
  } catch (error) {
    console.error('‚ùå [STRATEGY] Erreur lors de la r√©cup√©ration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration de la strat√©gie',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * GET /api/status
 * 
 * R√©cup√®re le statut de l'API Strategy Router
 * 
 * @route GET /api/status
 * @returns {ApiStatus} Statut de l'API
 * 
 * @example
 * GET /api/status
 * {
 *   "status": "active",
 *   "connectedToTriggerApi": true,
 *   "strategiesCount": 5,
 *   "timestamp": "2025-01-05T10:00:00Z"
 * }
 */
app.get('/api/status', async (req: express.Request, res: express.Response<ApiStatus>) => {
  try {
    console.log(`üîç [STATUS] V√©rification du statut de l'API`);
    
    const strategiesCount = await prisma.strategy.count({
      where: { isActive: true }
    });
    
    console.log(`‚úÖ [STATUS] API active avec ${strategiesCount} strat√©gie(s)`);
    
    res.json({
      status: 'active',
      connectedToTriggerApi: true,
      strategiesCount,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå [STATUS] Erreur lors de la v√©rification:', error);
    res.status(500).json({
      status: 'error',
      connectedToTriggerApi: false,
      strategiesCount: 0,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * GET /api/dashboard-stats
 * 
 * R√©cup√®re les statistiques pour le dashboard
 * 
 * @route GET /api/dashboard-stats
 * @returns {Object} Statistiques du dashboard
 * 
 * @example
 * GET /api/dashboard-stats
 * {
 *   "success": true,
 *   "stats": {
 *     "totalStrategies": 12,
 *     "activeStrategies": 8,
 *     "totalExecutions": 45,
 *     "totalUsers": 3,
 *     "totalWallets": 12,
 *     "recentExecutions": 7
 *   }
 * }
 */
app.get('/api/dashboard-stats', async (req: express.Request, res: express.Response) => {
  try {
    console.log(`üîç [DASHBOARD_STATS] R√©cup√©ration des statistiques`);
    
    // R√©cup√©ration des statistiques depuis la base de donn√©es
    const totalStrategies = await prisma.strategy.count();
    const activeStrategies = await prisma.strategy.count({
      where: { isActive: true }
    });
    const totalExecutions = await prisma.execution.count();
    const totalUsers = await prisma.user.count();
    const totalWallets = await prisma.strategy.count({
      where: { generatedAddress: { not: "" } }
    });
    
    // Ex√©cutions r√©centes (derni√®res 24h)
    const oneDayAgo = new Date();
    oneDayAgo.setDate(oneDayAgo.getDate() - 1);
    const recentExecutions = await prisma.execution.count({
      where: {
        createdAt: {
          gte: oneDayAgo
        }
      }
    });
    
    const stats = {
      totalStrategies,
      activeStrategies,
      totalExecutions,
      totalUsers,
      totalWallets,
      recentExecutions
    };
    
    console.log(`‚úÖ [DASHBOARD_STATS] Statistiques r√©cup√©r√©es:`, stats);
    
    res.json({
      success: true,
      stats
    });
  } catch (error) {
    console.error('‚ùå [DASHBOARD_STATS] Erreur lors de la r√©cup√©ration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des statistiques',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * DELETE /api/strategy/:id
 * 
 * Supprime une strat√©gie sp√©cifique
 * 
 * @route DELETE /api/strategy/:id
 * @param {string} id - ID de la strat√©gie √† supprimer
 * @returns {Object} R√©sultat de la suppression
 * 
 * @example
 * DELETE /api/strategy/cmcr14t270008icthcbqz59d5
 * {
 *   "success": true,
 *   "message": "Strat√©gie supprim√©e avec succ√®s",
 *   "strategyId": "cmcr14t270008icthcbqz59d5"
 * }
 */
app.delete('/api/strategy/:id', async (req: express.Request, res: express.Response) => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è [DELETE_STRATEGY] Suppression de la strat√©gie: ${id}`);
    
    // V√©rifier si la strat√©gie existe
    const existingStrategy = await prisma.strategy.findUnique({
      where: { id }
    });
    
    if (!existingStrategy) {
      console.log(`‚ùå [DELETE_STRATEGY] Strat√©gie ${id} non trouv√©e`);
      return res.status(404).json({
        success: false,
        error: 'Strat√©gie non trouv√©e',
        message: `Aucune strat√©gie avec l'ID "${id}" n'a √©t√© trouv√©e`
      });
    }
    
    // Supprimer les ex√©cutions associ√©es
    await prisma.execution.deleteMany({
      where: { strategyId: id }
    });
    console.log(`‚úÖ [DELETE_STRATEGY] Ex√©cutions supprim√©es pour la strat√©gie ${id}`);
    
    // Supprimer la strat√©gie
    await prisma.strategy.delete({
      where: { id }
    });
    
    console.log(`‚úÖ [DELETE_STRATEGY] Strat√©gie ${existingStrategy.strategyName} supprim√©e avec succ√®s`);
    
    res.json({
      success: true,
      message: 'Strat√©gie supprim√©e avec succ√®s',
      strategyId: id
    });
  } catch (error) {
    console.error('‚ùå [DELETE_STRATEGY] Erreur lors de la suppression:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la suppression de la strat√©gie',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * PATCH /api/strategy/:id
 * 
 * Modifie une strat√©gie existante
 * 
 * @route PATCH /api/strategy/:id
 * @param {string} id - ID de la strat√©gie √† modifier
 * @param {Object} body - Donn√©es √† modifier
 * @returns {Object} Strat√©gie modifi√©e
 * 
 * @example
 * PATCH /api/strategy/cmcr14t270008icthcbqz59d5
 * {
 *   "name": "Nouveau nom",
 *   "description": "Nouvelle description"
 * }
 */
app.patch('/api/strategy/:id', async (req: express.Request, res: express.Response) => {
  try {
    const { id } = req.params;
    const { name, description } = req.body;
    
    console.log(`‚úèÔ∏è [PATCH_STRATEGY] Modification de la strat√©gie: ${id}`);
    
    // V√©rifier si la strat√©gie existe
    const existingStrategy = await prisma.strategy.findUnique({
      where: { id }
    });
    
    if (!existingStrategy) {
      console.log(`‚ùå [PATCH_STRATEGY] Strat√©gie ${id} non trouv√©e`);
      return res.status(404).json({
        success: false,
        error: 'Strat√©gie non trouv√©e',
        message: `Aucune strat√©gie avec l'ID "${id}" n'a √©t√© trouv√©e`
      });
    }
    
    // Pr√©parer les donn√©es √† modifier
    const updateData: any = {};
    if (name !== undefined) updateData.strategyName = name;
    // Note: il n'y a pas de champ description dans le sch√©ma Prisma
    
    // Mettre √† jour la strat√©gie
    const updatedStrategy = await prisma.strategy.update({
      where: { id },
      data: updateData,
      include: {
        user: true,
        triggers: true,
        actions: true,
        executions: true
      }
    });
    
    console.log(`‚úÖ [PATCH_STRATEGY] Strat√©gie ${updatedStrategy.strategyName} modifi√©e avec succ√®s`);
    
    res.json({
      success: true,
      message: 'Strat√©gie modifi√©e avec succ√®s',
      strategy: {
        id: updatedStrategy.id,
        name: updatedStrategy.strategyName,
        description: updatedStrategy.strategyName, // Utiliser le nom comme description
        status: updatedStrategy.isActive ? 'active' : 'inactive',
        userWalletAddress: updatedStrategy.user.walletAddress,
        generatedAddress: updatedStrategy.generatedAddress,
        triggers: updatedStrategy.triggers,
        actions: updatedStrategy.actions,
        createdAt: updatedStrategy.createdAt,
        updatedAt: updatedStrategy.updatedAt
      }
    });
  } catch (error) {
    console.error('‚ùå [PATCH_STRATEGY] Erreur lors de la modification:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la modification de la strat√©gie',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

// =====================================
// D√âMARRAGE DU SERVEUR
// =====================================

/**
 * D√©marre le serveur Strategy Router API
 * 
 * Le serveur √©coute sur le port configur√© (par d√©faut 3002)
 * et affiche les informations de d√©marrage dans la console.
 */
app.listen(PORT, async () => {
  console.log(`üöÄ Strategy Router API d√©marr√©e sur le port ${PORT}`);
  console.log(`üåê API REST disponible sur http://localhost:${PORT}/api`);
  console.log(`üì® Pr√™t √† recevoir des √©v√©nements du CLI sur /api/process-event`);
  console.log(`üìã Routes disponibles:`);
  console.log(`   POST   /api/create-strategy        - Cr√©er une nouvelle strat√©gie`);
  console.log(`   GET    /api/user-strategies/:addr  - Strat√©gies d'un utilisateur`);
  console.log(`   POST   /api/process-event          - Traiter un √©v√©nement`);
  console.log(`   GET    /api/supported-chains       - Cha√Ænes support√©es`);
  console.log(`   GET    /api/smart-account/:id      - Info Smart Account`);
  console.log(`   GET    /api/strategies             - Toutes les strat√©gies`);
  console.log(`   GET    /api/strategy/:id           - Une strat√©gie sp√©cifique`);
  console.log(`   PATCH  /api/strategy/:id           - Modifier une strat√©gie`);
  console.log(`   DELETE /api/strategy/:id           - Supprimer une strat√©gie`);
  console.log(`   GET    /api/dashboard-stats        - Statistiques du dashboard`);
  console.log(`   GET    /api/status                 - Statut de l'API`);
  console.log(`üéØ Fonctionnalit√©s:`);
  console.log(`   ‚úÖ Gestion des strat√©gies utilisateur`);
  console.log(`   ‚úÖ Traitement des √©v√©nements Twitter`);
  console.log(`   ‚úÖ Wallets int√©gr√©s aux strat√©gies`);
  console.log(`   ‚úÖ Smart Accounts optionnels`);
  console.log(`   ‚úÖ Communication avec Circle Executor`);
  
  // Afficher le nombre de strat√©gies en base
  try {
    const strategiesCount = await prisma.strategy.count({ where: { isActive: true } });
    console.log(`üìä ${strategiesCount} strat√©gie(s) active(s) en base de donn√©es`);
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es:', error);
  }
  
  console.log(`üí° Pr√™t pour l'int√©gration avec TriggVest!`);
});

// G√©rer la fermeture propre de Prisma
process.on('SIGINT', async () => {
  console.log('\nüîå Fermeture de la connexion √† la base de donn√©es...');
  await prisma.$disconnect();
  process.exit(0);
}); 