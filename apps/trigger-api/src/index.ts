import inquirer from 'inquirer';
import axios from 'axios';
import chalk from 'chalk';
import { TweetEvent } from './types.js';
import dotenv from 'dotenv';

dotenv.config();

/**
 * =====================================
 * TRIGGER CLI - TRIGGVEST
 * =====================================
 * 
 * Interface CLI pour simuler des √©v√©nements et tester les strat√©gies
 * 
 * Fonctionnalit√©s principales :
 * - Simulation d'√©v√©nements Twitter
 * - Comptes pr√©d√©finis avec contenus populaires
 * - Envoi d'√©v√©nements au Strategy Router
 * - Interface utilisateur interactive
 * 
 * Port par d√©faut : Aucun (CLI seulement)
 * 
 * Flux :
 * 1. CLI ‚Üí Strategy Router (/api/process-event)
 * 2. Strategy Router ‚Üí Circle Executor
 * 3. Circle Executor ‚Üí Blockchain
 * 
 * =====================================
 */

console.log(chalk.blue.bold('üéØ Trigger CLI - TriggVest'));
console.log(chalk.gray('Simulateur d\'√©v√©nements pour d√©clencher les strat√©gies\n'));

// =====================================
// CONFIGURATION
// =====================================

// URL de l'API Strategy Router
const STRATEGY_ROUTER_API = process.env.STRATEGY_ROUTER_API || 'http://localhost:3002';

// =====================================
// DONN√âES PR√âD√âFINIES
// =====================================

/**
 * Sources d'√©v√©nements disponibles
 */
const SOURCES = [
  { name: 'üê¶ Twitter', value: 'twitter' }
  // Futur: üìà Prix, üì∞ News, etc.
];

/**
 * Comptes Twitter populaires avec exemples
 */
const TWITTER_ACCOUNTS = [
  { name: 'üá∫üá∏ Donald Trump (@realdonaldtrump)', value: '@realdonaldtrump' },
  { name: 'üè¶ Federal Reserve (@federalreserve)', value: '@federalreserve' },
  { name: 'üöÄ Elon Musk (@elonmusk)', value: '@elonmusk' },
  { name: 'üí∞ Coinbase (@coinbase)', value: '@coinbase' },
  { name: '‚ö° Vitalik Buterin (@vitalikbuterin)', value: '@vitalikbuterin' },
  { name: 'üìù Personnalis√©', value: 'custom' }
];

/**
 * Contenus pr√©d√©finis par compte avec des th√®mes vari√©s
 */
const PREDEFINED_CONTENTS: Record<string, string[]> = {
  '@realdonaldtrump': [
    'The economy is in terrible shape, massive recession coming!',
    'Bitcoin to the moon! Great investment!',
    'Market crash imminent, get out now!',
    'America First policies will save the economy'
  ],
  '@federalreserve': [
    'Interest rates rising due to economic instability',
    'Market outlook showing recession indicators',
    'Financial dumping patterns emerging across markets',
    'Emergency monetary policy measures under consideration'
  ],
  '@elonmusk': [
    'Bitcoin to the moon! üöÄ',
    'Dogecoin is the future of currency',
    'Tesla stock going parabolic',
    'Mars colonization will boost crypto adoption'
  ],
  '@coinbase': [
    'New DeFi protocols launching this week',
    'Crypto adoption reaching all-time highs',
    'Institutional investors flooding the market',
    'Revolutionary blockchain technology emerging'
  ],
  '@vitalikbuterin': [
    'Ethereum 2.0 staking rewards increasing',
    'Layer 2 solutions scaling exponentially',
    'DeFi ecosystem reaching maturity',
    'Smart contract innovation accelerating'
  ]
};

// =====================================
// FONCTIONS UTILITAIRES
// =====================================

/**
 * Envoie un √©v√©nement au Strategy Router
 * 
 * @param event - √âv√©nement √† envoyer
 * @returns true si l'envoi r√©ussit, false sinon
 */
async function sendEventToStrategyRouter(event: TweetEvent): Promise<boolean> {
  try {
    console.log(chalk.yellow('üì§ [SEND] Envoi de l\'√©v√©nement au Strategy Router...'));
    console.log(chalk.gray(`üìç [SEND] URL: ${STRATEGY_ROUTER_API}/api/process-event`));
    
    const response = await axios.post(`${STRATEGY_ROUTER_API}/api/process-event`, event);
    
    console.log(chalk.green('‚úÖ [SEND] √âv√©nement envoy√© avec succ√®s !'));
    
    // Afficher les r√©sultats d√©taill√©s
    const data = response.data;
    console.log(chalk.cyan('\nüìä [RESULTS] R√©sultats du traitement :'));
    console.log(chalk.white(`   üéØ Strat√©gies d√©clench√©es: ${data.matchedStrategies || 0}`));
    console.log(chalk.white(`   üë• Utilisateurs impact√©s: ${data.users?.length || 0}`));
    console.log(chalk.white(`   üîß Jobs envoy√©s: ${data.jobResults?.length || 0}`));
    
    // D√©tails des strat√©gies d√©clench√©es
    if (data.strategies && data.strategies.length > 0) {
      console.log(chalk.cyan('\nüéØ [STRATEGIES] Strat√©gies d√©clench√©es :'));
      data.strategies.forEach((strategy: any, index: number) => {
        console.log(chalk.white(`   ${index + 1}. ${strategy.name} (ID: ${strategy.id})`));
        console.log(chalk.gray(`      Wallet: ${strategy.generatedWallet}`));
      });
    }
    
    // D√©tails des utilisateurs
    if (data.users && data.users.length > 0) {
      console.log(chalk.cyan('\nüë• [USERS] Utilisateurs impact√©s :'));
      data.users.forEach((user: any, index: number) => {
        console.log(chalk.white(`   ${index + 1}. ${user.username || 'Anonyme'} (${user.userId})`));
        console.log(chalk.gray(`      Wallet: ${user.walletAddress}`));
        console.log(chalk.gray(`      Strat√©gie: ${user.strategyName}`));
      });
    }
    
    // R√©sultats des jobs
    if (data.jobResults && data.jobResults.length > 0) {
      console.log(chalk.cyan('\nüîß [JOBS] R√©sultats des ex√©cutions :'));
      data.jobResults.forEach((job: any, index: number) => {
        const status = job.status === 'completed' ? '‚úÖ' : '‚ùå';
        console.log(chalk.white(`   ${index + 1}. ${status} Job ${job.jobId}`));
        console.log(chalk.gray(`      Statut: ${job.status}`));
        console.log(chalk.gray(`      Actions: ${job.executions?.length || 0}`));
      });
    }
    
    if (data.matchedStrategies === 0) {
      console.log(chalk.yellow('\n‚ö†Ô∏è  [RESULTS] Aucune strat√©gie d√©clench√©e par cet √©v√©nement'));
      console.log(chalk.gray('üí° [TIP] V√©rifiez que des strat√©gies correspondent √† ce compte/contenu'));
    }
    
    return true;
  } catch (error) {
    console.log(chalk.red('‚ùå [SEND] Erreur lors de l\'envoi :'));
    if (axios.isAxiosError(error)) {
      console.log(chalk.red(`   üåê Erreur r√©seau: ${error.message}`));
      if (error.response?.status) {
        console.log(chalk.red(`   üìä Code HTTP: ${error.response.status}`));
      }
      if (error.response?.data) {
        console.log(chalk.red(`   üìù D√©tails: ${JSON.stringify(error.response.data, null, 2)}`));
      }
      
      // Conseils de d√©pannage
      console.log(chalk.yellow('\nüí° [HELP] Conseils de d√©pannage :'));
      console.log(chalk.white('   1. V√©rifiez que Strategy Router API est d√©marr√©e (port 3002)'));
      console.log(chalk.white('   2. V√©rifiez la connectivit√© r√©seau'));
      console.log(chalk.white('   3. V√©rifiez la configuration des variables d\'environnement'));
    } else {
      console.log(chalk.red(`   üîß Erreur: ${error}`));
    }
    return false;
  }
}

// =====================================
// INTERFACE CLI PRINCIPALE
// =====================================

/**
 * Fonction principale du CLI interactive
 * 
 * Guide l'utilisateur √† travers :
 * 1. S√©lection de la source d'√©v√©nement
 * 2. Choix du compte Twitter
 * 3. S√©lection du contenu
 * 4. Confirmation et envoi
 * 5. Option de continuer
 */
async function runTriggerCLI(): Promise<void> {
  try {
    console.log(chalk.blue('\nüéØ [CLI] D√©marrage du simulateur d\'√©v√©nements'));
    
    // =====================================
    // √âTAPE 1: CHOIX DE LA SOURCE
    // =====================================
    
    const { source } = await inquirer.prompt([
      {
        type: 'list',
        name: 'source',
        message: 'Choisissez une source d\'√©v√©nement :',
        choices: SOURCES
      }
    ]);

    if (source === 'twitter') {
      console.log(chalk.blue('\nüê¶ [TWITTER] Simulation d\'√©v√©nement Twitter'));
      
      // =====================================
      // √âTAPE 2: CHOIX DU COMPTE
      // =====================================
      
      const { account } = await inquirer.prompt([
        {
          type: 'list',
          name: 'account',
          message: 'Choisissez un compte Twitter :',
          choices: TWITTER_ACCOUNTS
        }
      ]);

      let finalAccount = account;
      if (account === 'custom') {
        const { customAccount } = await inquirer.prompt([
          {
            type: 'input',
            name: 'customAccount',
            message: 'Entrez le nom du compte (ex: @username) :',
            validate: (input: string) => {
              if (input.trim().length === 0) return 'Le nom du compte ne peut pas √™tre vide';
              if (!input.startsWith('@')) return 'Le nom du compte doit commencer par @';
              return true;
            }
          }
        ]);
        finalAccount = customAccount;
      }

      // =====================================
      // √âTAPE 3: CHOIX DU CONTENU
      // =====================================
      
      const predefinedContents = PREDEFINED_CONTENTS[finalAccount] || [];
      const contentChoices = [
        ...predefinedContents.map((content, index) => ({
          name: `üìù ${content.substring(0, 60)}${content.length > 60 ? '...' : ''}`,
          value: content
        })),
        { name: '‚úèÔ∏è  Contenu personnalis√©', value: 'custom' }
      ];

      const { content } = await inquirer.prompt([
        {
          type: 'list',
          name: 'content',
          message: 'Choisissez le contenu du tweet :',
          choices: contentChoices,
          pageSize: 10
        }
      ]);

      let finalContent = content;
      if (content === 'custom') {
        const { customContent } = await inquirer.prompt([
          {
            type: 'input',
            name: 'customContent',
            message: 'Entrez le contenu du tweet :',
            validate: (input: string) => {
              if (input.trim().length === 0) return 'Le contenu ne peut pas √™tre vide';
              if (input.length > 280) return 'Le contenu ne peut pas d√©passer 280 caract√®res';
              return true;
            }
          }
        ]);
        finalContent = customContent;
      }

      // =====================================
      // √âTAPE 4: CONFIRMATION
      // =====================================
      
      console.log(chalk.cyan('\nüìã [SUMMARY] R√©sum√© de l\'√©v√©nement :'));
      console.log(chalk.white(`   üê¶ Source: ${source}`));
      console.log(chalk.white(`   üë§ Compte: ${finalAccount}`));
      console.log(chalk.white(`   üìù Contenu: "${finalContent}"`));

      const { confirm } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'confirm',
          message: 'Confirmer l\'envoi de cet √©v√©nement ?',
          default: true
        }
      ]);

      if (confirm) {
        // =====================================
        // √âTAPE 5: CR√âATION ET ENVOI
        // =====================================
        
        console.log(chalk.blue('\nüöÄ [SEND] Pr√©paration de l\'√©v√©nement...'));
        
        const tweetEvent: TweetEvent = {
          type: 'twitter',
          account: finalAccount,
          content: finalContent,
          timestamp: new Date().toISOString(),
          id: `tweet_${Date.now()}`
        };

        console.log(chalk.gray(`üìÖ [SEND] Timestamp: ${tweetEvent.timestamp}`));
        console.log(chalk.gray(`üÜî [SEND] ID: ${tweetEvent.id}`));

        const success = await sendEventToStrategyRouter(tweetEvent);
        
        if (success) {
          console.log(chalk.green('\nüéâ [SUCCESS] √âv√©nement trait√© avec succ√®s !'));
        } else {
          console.log(chalk.red('\nüí• [ERROR] √âchec du traitement de l\'√©v√©nement'));
        }
        
        // =====================================
        // √âTAPE 6: CONTINUER OU QUITTER
        // =====================================
        
        const { continuePrompt } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'continuePrompt',
            message: 'Voulez-vous simuler un autre √©v√©nement ?',
            default: true
          }
        ]);

        if (continuePrompt) {
          console.log(chalk.blue('\nüîÑ [CLI] Nouveau cycle de simulation\n'));
          await runTriggerCLI(); // R√©cursion pour continuer
        } else {
          console.log(chalk.green('\nüëã [CLI] Au revoir ! Merci d\'avoir utilis√© Trigger CLI'));
          console.log(chalk.gray('üí° [TIP] Relancez avec `npm start` pour une nouvelle session'));
        }
      } else {
        console.log(chalk.yellow('\n‚ùå [CANCELLED] Envoi annul√© par l\'utilisateur'));
        
        const { retry } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'retry',
            message: 'Voulez-vous recommencer ?',
            default: true
          }
        ]);

        if (retry) {
          await runTriggerCLI();
        }
      }
    }

  } catch (error) {
    console.log(chalk.red('\nüí• [CLI] Erreur fatale du CLI :'));
    console.log(chalk.red(`   üîß ${error instanceof Error ? error.message : 'Erreur inconnue'}`));
    console.log(chalk.yellow('\nüí° [HELP] Red√©marrez le CLI pour r√©essayer'));
  }
}

// =====================================
// POINT D'ENTR√âE
// =====================================

/**
 * Point d'entr√©e principal du CLI
 * 
 * D√©marre l'interface interactive apr√®s avoir affich√©
 * les informations de configuration.
 */
async function main(): Promise<void> {
  console.log(chalk.cyan('‚öôÔ∏è  [CONFIG] Configuration :'));
  console.log(chalk.white(`   üåê Strategy Router API: ${STRATEGY_ROUTER_API}`));
  console.log(chalk.white(`   üìä Comptes pr√©d√©finis: ${Object.keys(PREDEFINED_CONTENTS).length}`));
  console.log(chalk.white(`   üìù Contenus disponibles: ${Object.values(PREDEFINED_CONTENTS).flat().length}`));
  
  // V√©rifier la connectivit√© avec Strategy Router
  try {
    console.log(chalk.yellow('\nüîç [TEST] Test de connectivit√© avec Strategy Router...'));
    await axios.get(`${STRATEGY_ROUTER_API}/api/status`);
    console.log(chalk.green('‚úÖ [TEST] Strategy Router accessible !'));
  } catch (error) {
    console.log(chalk.red('‚ùå [TEST] Strategy Router non accessible'));
    console.log(chalk.yellow('‚ö†Ô∏è  [WARNING] Assurez-vous que Strategy Router API est d√©marr√©e'));
    console.log(chalk.gray('üí° [TIP] Lancez `npm run dev` dans apps/strategy-router-api/'));
  }
  
  console.log(chalk.blue('\nüé¨ [START] D√©marrage de l\'interface interactive...\n'));
  
  await runTriggerCLI();
}

// D√©marrer le CLI
main().catch((error) => {
  console.error(chalk.red('\nüí• [FATAL] Erreur fatale :'), error);
  process.exit(1);
}); 