import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { 
  Job, 
  JobResponse, 
  Execution, 
  ExecutionDetails, 
  Action, 
  ClosePositionRequest, 
  ClosePositionResponse, 
  ExecutionsResponse, 
  ApiStatus 
} from './types';
import { 
  SmartAccountService, 
  SupportedChainId, 
  createSmartAccountService,
  isGaslessSupported
} from './lib/smart-account-service';
import { parseUnits } from 'viem';
import axios from 'axios';

dotenv.config();

/**
 * =====================================
 * CIRCLE EXECUTOR API - TRIGGVEST
 * =====================================
 * 
 * Cette API est responsable de l'ex√©cution des transactions gasless
 * via Circle CCTP (Cross-Chain Transfer Protocol).
 * 
 * Fonctionnalit√©s principales :
 * - Ex√©cution de bridges gasless entre cha√Ænes
 * - Gestion des Smart Accounts
 * - Traitement des jobs de strat√©gies
 * - Gestion des positions et cl√¥tures
 * 
 * Port par d√©faut : 3003
 * 
 * D√©pendances :
 * - Circle CCTP pour les bridges
 * - Smart Accounts pour l'ex√©cution gasless
 * - Viem pour les interactions blockchain
 * 
 * =====================================
 */

// Configuration de l'application
const app = express();
const PORT = process.env.PORT || 3003;

// =====================================
// MIDDLEWARE
// =====================================

app.use(cors());
app.use(express.json());

// =====================================
// CONSTANTES ET CONFIGURATION
// =====================================

// Mapping des noms de cha√Ænes vers les IDs (uniquement Arbitrum et Base pour CCTP)
const CHAIN_NAME_TO_ID: Record<string, SupportedChainId> = {
  'Arbitrum': SupportedChainId.ARB_SEPOLIA,
  'Base': SupportedChainId.BASE_SEPOLIA,
};

// Historique des ex√©cutions (en m√©moire pour le d√©veloppement)
// TODO: Migrer vers une base de donn√©es pour la production
const executionHistory: Execution[] = [];

// =====================================
// UTILITAIRES CIRCLE CCTP
// =====================================

/**
 * R√©cup√®re l'attestation Circle pour une transaction donn√©e
 * 
 * @param transactionHash - Hash de la transaction de burn
 * @param sourceChainId - ID de la cha√Æne source
 * @returns Donn√©es d'attestation Circle
 * 
 * @throws Error si l'attestation n'est pas disponible apr√®s max retries
 */
async function retrieveAttestation(transactionHash: string, sourceChainId: SupportedChainId): Promise<any> {
  console.log(`üîç [ATTESTATION] R√©cup√©ration pour tx: ${transactionHash}`);
  
  const maxRetries = 20;
  let retries = 0;
  
  while (retries < maxRetries) {
    try {
      const response = await axios.get(
        `https://iris-api-sandbox.circle.com/v1/attestations/${transactionHash}`
      );
      
      if (response.data && response.data.attestation) {
        console.log(`‚úÖ [ATTESTATION] R√©cup√©r√©e avec succ√®s apr√®s ${retries + 1} tentatives`);
        return response.data;
      }
      
      console.log(`‚è≥ [ATTESTATION] Pas encore pr√™te, nouvelle tentative... (${retries + 1}/${maxRetries})`);
      await new Promise(resolve => setTimeout(resolve, 3000));
      retries++;
    } catch (error) {
      console.log(`‚ùå [ATTESTATION] Erreur lors de la r√©cup√©ration: ${error}`);
      retries++;
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }
  
  throw new Error(`Impossible de r√©cup√©rer l'attestation apr√®s ${maxRetries} tentatives`);
}

// =====================================
// MOTEUR D'EX√âCUTION GASLESS
// =====================================

/**
 * Ex√©cute un bridge gasless CCTP entre deux cha√Ænes
 * 
 * Ce processus comprend :
 * 1. Cr√©ation du Smart Account source
 * 2. V√©rification du solde USDC
 * 3. Burn USDC sur la cha√Æne source
 * 4. R√©cup√©ration de l'attestation Circle
 * 5. Cr√©ation du Smart Account destination
 * 6. Mint USDC sur la cha√Æne destination
 * 
 * @param privateKey - Cl√© priv√©e du propri√©taire du Smart Account
 * @param sourceChainId - ID de la cha√Æne source
 * @param destinationChainId - ID de la cha√Æne destination
 * @param amount - Montant en USDC √† transf√©rer
 * @param userId - ID de l'utilisateur pour les logs
 * @returns D√©tails de l'ex√©cution
 */
async function executeBridgeGasless(
  privateKey: string,
  sourceChainId: SupportedChainId,
  destinationChainId: SupportedChainId,
  amount: string,
  userId: string
): Promise<ExecutionDetails> {
  console.log(`üåâ [BRIDGE] D√©but du bridge gasless: ${amount} USDC`);
  console.log(`üìç [BRIDGE] ${sourceChainId} ‚Üí ${destinationChainId} pour l'utilisateur ${userId}`);
  
  try {
    // =====================================
    // PHASE 1: PR√âPARATION CHA√éNE SOURCE
    // =====================================
    
    console.log(`üîß [PHASE 1] Cr√©ation du Smart Account source...`);
    const sourceSmartAccount = await createSmartAccountService(privateKey, sourceChainId);
    console.log(`‚úÖ [PHASE 1] Smart Account source: ${sourceSmartAccount.getSmartAccountAddress()}`);
    
    // =====================================
    // PHASE 2: V√âRIFICATION DU SOLDE
    // =====================================
    
    console.log(`üí∞ [PHASE 2] V√©rification du solde USDC...`);
    const balanceCheck = await sourceSmartAccount.checkSufficientBalance(amount, true);
    console.log(`üí∞ [PHASE 2] Solde actuel: ${balanceCheck.currentBalance} USDC`);
    
    if (!balanceCheck.sufficient) {
      console.error(`üö® [PHASE 2] ALERTE: Solde USDC insuffisant!`);
      console.error(`   üìç Smart Account: ${sourceSmartAccount.getSmartAccountAddress()}`);
      console.error(`   üí∞ Solde actuel: ${balanceCheck.currentBalance} USDC`);
      console.error(`   üéØ Montant requis: ${balanceCheck.requiredAmount} USDC`);
      console.error(`   üìà Montant recommand√©: ${balanceCheck.recommendedAmount} USDC (incluant frais gasless)`);
      console.error(`   ‚ö†Ô∏è  Manque: ${balanceCheck.shortfall} USDC`);
      console.error(`   üí° Solution: Transf√©rer des USDC vers ce Smart Account`);
      console.error(`   üåê Faucet Circle: https://faucet.circle.com`);
      
      throw new Error(`‚ùå Solde USDC insuffisant: ${balanceCheck.currentBalance} USDC disponible, ${balanceCheck.recommendedAmount} USDC requis (incluant frais). Manque ${balanceCheck.shortfall} USDC.`);
    }
    
    console.log(`‚úÖ [PHASE 2] Solde suffisant pour le bridge gasless`);
    console.log(`   üéØ Montant √† transf√©rer: ${amount} USDC`);
    console.log(`   üí∞ Solde restant: ${(parseFloat(balanceCheck.currentBalance) - parseFloat(amount)).toFixed(6)} USDC`);
    
    // =====================================
    // PHASE 3: BURN SUR CHA√éNE SOURCE
    // =====================================
    
    console.log(`üî• [PHASE 3] Burn USDC sur la cha√Æne source...`);
    const burnAmount = parseUnits(amount, 6);
    const burnTxHash = await sourceSmartAccount.burnUSDC(
      burnAmount,
      destinationChainId,
      sourceSmartAccount.getSmartAccountAddress(),
      "fast"
    );
    console.log(`üî• [PHASE 3] Transaction de burn envoy√©e: ${burnTxHash}`);
    
    // Attendre la confirmation du burn
    const burnReceipt = await sourceSmartAccount.waitForUserOperationReceipt(burnTxHash);
    console.log(`‚úÖ [PHASE 3] Burn confirm√©: ${burnReceipt.receipt.transactionHash}`);
    
    // =====================================
    // PHASE 4: R√âCUP√âRATION ATTESTATION
    // =====================================
    
    console.log(`üìú [PHASE 4] R√©cup√©ration de l'attestation Circle...`);
    const attestation = await retrieveAttestation(burnReceipt.receipt.transactionHash, sourceChainId);
    console.log(`‚úÖ [PHASE 4] Attestation r√©cup√©r√©e avec succ√®s`);
    
    // =====================================
    // PHASE 5: PR√âPARATION CHA√éNE DESTINATION
    // =====================================
    
    console.log(`üéØ [PHASE 5] Cr√©ation du Smart Account destination...`);
    const destSmartAccount = await createSmartAccountService(privateKey, destinationChainId);
    console.log(`‚úÖ [PHASE 5] Smart Account destination: ${destSmartAccount.getSmartAccountAddress()}`);
    
    // =====================================
    // PHASE 6: MINT SUR CHA√éNE DESTINATION
    // =====================================
    
    console.log(`ü™ô [PHASE 6] Mint USDC sur la cha√Æne destination...`);
    const mintTxHash = await destSmartAccount.mintUSDC(attestation);
    console.log(`ü™ô [PHASE 6] Transaction de mint envoy√©e: ${mintTxHash}`);
    
    // Attendre la confirmation du mint
    const mintReceipt = await destSmartAccount.waitForUserOperationReceipt(mintTxHash);
    console.log(`‚úÖ [PHASE 6] Mint confirm√©: ${mintReceipt.receipt.transactionHash}`);
    
    // =====================================
    // FINALISATION
    // =====================================
    
    console.log(`üéâ [BRIDGE] Bridge gasless termin√© avec succ√®s!`);
    console.log(`üìä [BRIDGE] R√©sum√©:`);
    console.log(`   üåê Source: ${sourceChainId} ‚Üí Destination: ${destinationChainId}`);
    console.log(`   üí∞ Montant: ${amount} USDC`);
    console.log(`   üî• Burn TX: ${burnReceipt.receipt.transactionHash}`);
    console.log(`   ü™ô Mint TX: ${mintReceipt.receipt.transactionHash}`);
    
    return {
      fromAsset: 'USDC',
      toAsset: 'USDC',
      amount: amount,
      targetChain: destinationChainId.toString(),
      txHash: mintReceipt.receipt.transactionHash
    };
    
  } catch (error) {
    console.error(`‚ùå [BRIDGE] √âchec du bridge gasless: ${error}`);
    throw error;
  }
}

// =====================================
// MOTEUR D'EX√âCUTION DES ACTIONS
// =====================================

/**
 * Ex√©cute une action sp√©cifique pour une strat√©gie
 * 
 * @param action - Action √† ex√©cuter
 * @param userId - ID de l'utilisateur
 * @param strategyPrivateKey - Cl√© priv√©e de la strat√©gie (optionnelle)
 * @returns Ex√©cution compl√©t√©e
 */
async function executeAction(action: Action, userId: string, strategyPrivateKey?: string): Promise<Execution> {
  console.log(`üîÑ [ACTION] Ex√©cution de l'action: ${action.type} pour l'utilisateur ${userId}`);
  
  const execution: Execution = {
    id: `exec_${Date.now()}`,
    userId,
    action,
    status: 'pending',
    timestamp: new Date().toISOString(),
    details: {}
  };
  
  try {
    switch (action.type) {
      case 'bridge_gasless':
        await executeBridgeGaslessAction(action, userId, strategyPrivateKey, execution);
        break;
        
      case 'close_position':
        await executeClosePositionAction(action, userId, execution);
        break;
        
      case 'convert_all':
        await executeConvertAllAction(action, userId, execution);
        break;
        
      default:
        throw new Error(`Type d'action non support√©: ${action.type}`);
    }
    
    execution.status = 'completed';
    console.log(`‚úÖ [ACTION] Action ${action.type} termin√©e avec succ√®s`);
    
  } catch (error) {
    execution.status = 'error';
    execution.error = error instanceof Error ? error.message : 'Erreur inconnue';
    console.error(`‚ùå [ACTION] √âchec de l'action ${action.type}: ${execution.error}`);
  }
  
  executionHistory.push(execution);
  return execution;
}

/**
 * Ex√©cute une action de bridge gasless
 */
async function executeBridgeGaslessAction(
  action: Action, 
  userId: string, 
  strategyPrivateKey: string | undefined, 
  execution: Execution
): Promise<void> {
  if (!strategyPrivateKey) {
    throw new Error('Cl√© priv√©e requise pour le bridge gasless');
  }
  
  const sourceChainId = CHAIN_NAME_TO_ID[action.sourceChain || 'Arbitrum'];
  const destinationChainId = CHAIN_NAME_TO_ID[action.targetChain];
  const amount = action.amount || '10';
  
  if (!sourceChainId || !destinationChainId) {
    throw new Error('Cha√Æne non support√©e');
  }
  
  if (!isGaslessSupported(sourceChainId) || !isGaslessSupported(destinationChainId)) {
    throw new Error('Bridge gasless non support√© sur les cha√Ænes s√©lectionn√©es');
  }
  
  // V√©rification pr√©liminaire du solde
  const preliminarySmartAccount = await createSmartAccountService(strategyPrivateKey, sourceChainId);
  const preliminaryBalanceCheck = await preliminarySmartAccount.checkSufficientBalance(amount, true);
  
  if (!preliminaryBalanceCheck.sufficient) {
    console.error(`üö® [BRIDGE] √âCHEC PR√â-V√âRIFICATION: Solde insuffisant`);
    console.error(`   üìç Smart Account: ${preliminarySmartAccount.getSmartAccountAddress()}`);
    console.error(`   üí∞ Solde: ${preliminaryBalanceCheck.currentBalance} USDC`);
    console.error(`   üéØ Requis: ${preliminaryBalanceCheck.recommendedAmount} USDC`);
    console.error(`   ‚ö†Ô∏è  Manque: ${preliminaryBalanceCheck.shortfall} USDC`);
    
    throw new Error(`‚ùå Solde insuffisant: ${preliminaryBalanceCheck.currentBalance} USDC disponible, ${preliminaryBalanceCheck.recommendedAmount} USDC requis. Manque ${preliminaryBalanceCheck.shortfall} USDC.`);
  }
  
  // Ex√©cuter le bridge gasless
  const executionDetails = await executeBridgeGasless(
    strategyPrivateKey,
    sourceChainId,
    destinationChainId,
    amount,
    userId
  );
  
  execution.details = executionDetails;
}

/**
 * Ex√©cute une action de cl√¥ture de position
 */
async function executeClosePositionAction(
  action: Action, 
  userId: string, 
  execution: Execution
): Promise<void> {
  console.log(`üîÑ [CLOSE_POSITION] Simulation de cl√¥ture de position pour ${userId}`);
  
  // Simulation de cl√¥ture de position
  execution.details = {
    fromAsset: action.targetAsset,
    toAsset: 'USDC',
    amount: '100',
    targetChain: action.targetChain,
    txHash: `0x${Math.random().toString(16).slice(2, 66)}`
  };
  
  console.log(`‚úÖ [CLOSE_POSITION] Position ferm√©e (simulation)`);
}

/**
 * Ex√©cute une action de conversion totale
 */
async function executeConvertAllAction(
  action: Action, 
  userId: string, 
  execution: Execution
): Promise<void> {
  console.log(`üîÑ [CONVERT_ALL] Simulation de conversion totale pour ${userId}`);
  
  // Simulation de conversion
  execution.details = {
    fromAsset: 'USDC',
    toAsset: action.targetAsset,
    amount: '100',
    targetChain: action.targetChain,
    txHash: `0x${Math.random().toString(16).slice(2, 66)}`
  };
  
  console.log(`‚úÖ [CONVERT_ALL] Conversion termin√©e (simulation)`);
}

// =====================================
// ROUTES API REST
// =====================================

/**
 * POST /api/execute-job
 * 
 * Ex√©cute un job de strat√©gie avec ses actions associ√©es
 * 
 * @route POST /api/execute-job
 * @param {Job} req.body - Donn√©es du job √† ex√©cuter
 * @param {string} req.body.strategyId - ID de la strat√©gie
 * @param {string} req.body.userId - ID de l'utilisateur
 * @param {string} req.body.strategyName - Nom de la strat√©gie
 * @param {TweetEvent} req.body.triggeredBy - √âv√©nement d√©clencheur
 * @param {Action[]} req.body.actions - Actions √† ex√©cuter
 * @param {string} req.body.strategyPrivateKey - Cl√© priv√©e de la strat√©gie
 * 
 * @returns {JobResponse} R√©sultat de l'ex√©cution du job
 * 
 * @example
 * POST /api/execute-job
 * {
 *   "strategyId": "strategy_123",
 *   "userId": "user_456",
 *   "strategyName": "Bridge vers Base",
 *   "triggeredBy": {
 *     "type": "twitter",
 *     "account": "@elonmusk",
 *     "content": "Bitcoin to the moon!",
 *     "timestamp": "2025-01-05T10:00:00Z",
 *     "id": "tweet_789"
 *   },
 *   "actions": [
 *     {
 *       "type": "bridge_gasless",
 *       "targetAsset": "USDC",
 *       "targetChain": "Base",
 *       "amount": "10",
 *       "sourceChain": "Arbitrum"
 *     }
 *   ],
 *   "strategyPrivateKey": "0x..."
 * }
 */
app.post('/api/execute-job', async (req: express.Request<{}, JobResponse, Job>, res: express.Response<JobResponse>) => {
  const { strategyId, userId, strategyName, triggeredBy, actions, strategyPrivateKey } = req.body;
  
  console.log(`üìã [JOB] Nouveau job re√ßu: ${strategyName} (${userId})`);
  console.log(`üéØ [JOB] D√©clench√© par: ${triggeredBy.type} - ${triggeredBy.account}`);
  console.log(`üìù [JOB] Contenu: ${triggeredBy.content}`);
  console.log(`üîß [JOB] ${actions.length} action(s) √† ex√©cuter`);
  
  try {
    const executions: Execution[] = [];
    
    // Ex√©cuter chaque action s√©quentiellement
    for (let i = 0; i < actions.length; i++) {
      const action = actions[i];
      console.log(`üîÑ [JOB] Ex√©cution de l'action ${i + 1}/${actions.length}: ${action.type}`);
      
      const execution = await executeAction(action, userId, strategyPrivateKey);
      executions.push(execution);
      
      // Arr√™ter si une action √©choue
      if (execution.status === 'error') {
        console.error(`‚ùå [JOB] Arr√™t du job apr√®s l'√©chec de l'action ${i + 1}`);
        break;
      }
    }
    
    // D√©terminer le statut global du job
    const hasErrors = executions.some(exec => exec.status === 'error');
    const jobStatus = hasErrors ? 'error' : 'completed';
    
    const jobResult: JobResponse = {
      jobId: `job_${Date.now()}`,
      strategyId,
      userId,
      strategyName,
      triggeredBy,
      executions,
      status: jobStatus,
      timestamp: new Date().toISOString()
    };
    
    console.log(`‚úÖ [JOB] Job termin√©: ${executions.length} action(s) ex√©cut√©e(s) - Status: ${jobStatus}`);
    
    res.json(jobResult);
  } catch (error) {
    console.error('‚ùå [JOB] Erreur fatale lors de l\'ex√©cution du job:', error);
    res.status(500).json({
      jobId: `job_${Date.now()}`,
      strategyId,
      userId,
      strategyName,
      triggeredBy,
      executions: [],
      status: 'error',
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * POST /api/close-position
 * 
 * Ferme une position manuellement pour un utilisateur
 * 
 * @route POST /api/close-position
 * @param {ClosePositionRequest} req.body - Donn√©es de la position √† fermer
 * @param {string} req.body.userId - ID de l'utilisateur
 * @param {string} req.body.targetAsset - Asset √† fermer
 * @param {string} req.body.targetChain - Cha√Æne cible
 * 
 * @returns {ClosePositionResponse} R√©sultat de la fermeture
 * 
 * @example
 * POST /api/close-position
 * {
 *   "userId": "user_123",
 *   "targetAsset": "ETH",
 *   "targetChain": "Base"
 * }
 */
app.post('/api/close-position', async (req: express.Request<{}, ClosePositionResponse, ClosePositionRequest>, res: express.Response<ClosePositionResponse | { error: string; message?: string }>) => {
  const { userId, targetAsset, targetChain } = req.body;
  
  console.log(`üîÑ [CLOSE_POSITION] Fermeture manuelle de position pour l'utilisateur ${userId}`);
  console.log(`üìç [CLOSE_POSITION] Asset: ${targetAsset}, Cha√Æne: ${targetChain}`);
  
  // Validation des param√®tres
  if (!userId || !targetAsset || !targetChain) {
    console.error('‚ùå [CLOSE_POSITION] Param√®tres manquants');
    return res.status(400).json({
      error: 'Param√®tres manquants',
      message: 'Les champs userId, targetAsset et targetChain sont requis'
    });
  }
  
  try {
    const action: Action = {
      type: 'close_position',
      targetAsset,
      targetChain
    };
    
    const execution = await executeAction(action, userId);
    
    console.log(`‚úÖ [CLOSE_POSITION] Position ferm√©e avec succ√®s`);
    
    res.json({
      success: true,
      execution
    });
  } catch (error) {
    console.error('‚ùå [CLOSE_POSITION] Erreur lors de la fermeture:', error);
    res.status(500).json({
      error: 'Erreur lors de la fermeture de position',
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

/**
 * GET /api/executions
 * 
 * R√©cup√®re l'historique des ex√©cutions
 * 
 * @route GET /api/executions
 * @param {string} [query.userId] - Filtrer par ID d'utilisateur (optionnel)
 * 
 * @returns {ExecutionsResponse} Liste des ex√©cutions
 * 
 * @example
 * GET /api/executions
 * GET /api/executions?userId=user_123
 */
app.get('/api/executions', (req: express.Request<{}, ExecutionsResponse, {}, { userId?: string }>, res: express.Response<ExecutionsResponse>) => {
  const { userId } = req.query;
  
  console.log(`üìä [EXECUTIONS] R√©cup√©ration de l'historique des ex√©cutions`);
  if (userId) {
    console.log(`üîç [EXECUTIONS] Filtrage par utilisateur: ${userId}`);
  }
  
  let filteredHistory = executionHistory;
  if (userId) {
    filteredHistory = executionHistory.filter(exec => exec.userId === userId);
  }
  
  console.log(`üìã [EXECUTIONS] ${filteredHistory.length} ex√©cution(s) trouv√©e(s)`);
  
  res.json({
    executions: filteredHistory,
    count: filteredHistory.length
  });
});

/**
 * GET /api/status
 * 
 * R√©cup√®re le statut de l'API Circle Executor
 * 
 * @route GET /api/status
 * @returns {ApiStatus} Statut de l'API
 * 
 * @example
 * GET /api/status
 * {
 *   "status": "active",
 *   "executionsCount": 42,
 *   "timestamp": "2025-01-05T10:00:00Z"
 * }
 */
app.get('/api/status', (req: express.Request, res: express.Response<ApiStatus>) => {
  console.log(`üîç [STATUS] V√©rification du statut de l'API`);
  
  const status: ApiStatus = {
    status: 'active',
    executionsCount: executionHistory.length,
    timestamp: new Date().toISOString()
  };
  
  console.log(`‚úÖ [STATUS] API active avec ${executionHistory.length} ex√©cution(s)`);
  
  res.json(status);
});

// =====================================
// D√âMARRAGE DU SERVEUR
// =====================================

/**
 * D√©marre le serveur Circle Executor API
 * 
 * Le serveur √©coute sur le port configur√© (par d√©faut 3003)
 * et affiche les informations de d√©marrage dans la console.
 */
app.listen(PORT, () => {
  console.log(`üöÄ Circle Executor API d√©marr√©e sur le port ${PORT}`);
  console.log(`üåê API REST disponible sur http://localhost:${PORT}/api`);
  console.log(`üîó Pr√™t √† recevoir des jobs de Strategy Router`);
  console.log(`üìã Routes disponibles:`);
  console.log(`   POST /api/execute-job      - Ex√©cuter un job de strat√©gie`);
  console.log(`   POST /api/close-position   - Fermer une position manuellement`);
  console.log(`   GET  /api/executions       - Historique des ex√©cutions`);
  console.log(`   GET  /api/status           - Statut de l'API`);
  console.log(`üéØ Fonctionnalit√©s support√©es:`);
  console.log(`   ‚úÖ Bridge gasless CCTP (Arbitrum ‚Üî Base)`);
  console.log(`   ‚úÖ Smart Accounts avec Circle Paymaster`);
  console.log(`   ‚úÖ Fermeture de positions (simulation)`);
  console.log(`   ‚úÖ Conversion d'assets (simulation)`);
  console.log(`üí° Pr√™t pour l'int√©gration avec TriggVest!`);
}); 