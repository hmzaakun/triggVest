import dotenv from 'dotenv';
import { SupportedChainId, createSmartAccountService } from '../src/lib/smart-account-service';
import { parseUnits } from 'viem';
import axios from 'axios';

// Charger les variables d'environnement
dotenv.config();

// Configuration du test
const TEST_PRIVATE_KEY = process.env.PRIVATE_KEY || 'your_private_key_here';
const TEST_AMOUNT = '10'; // 10 USDC
const SOURCE_CHAIN = SupportedChainId.ARB_SEPOLIA;
const DESTINATION_CHAIN = SupportedChainId.BASE_SEPOLIA;

// Fonction pour r√©cup√©rer l'attestation Circle
async function retrieveAttestation(transactionHash: string, sourceChainId: SupportedChainId): Promise<any> {
  console.log(`üîç R√©cup√©ration de l'attestation pour tx: ${transactionHash}`);
  
  const maxRetries = 20;
  let retries = 0;
  
  while (retries < maxRetries) {
    try {
      const response = await axios.get(
        `https://iris-api-sandbox.circle.com/v1/attestations/${transactionHash}`
      );
      
      if (response.data && response.data.attestation) {
        console.log(`‚úÖ Attestation r√©cup√©r√©e avec succ√®s`);
        return response.data;
      }
      
      console.log(`‚è≥ Attestation pas encore pr√™te, nouvelle tentative... (${retries + 1}/${maxRetries})`);
      await new Promise(resolve => setTimeout(resolve, 5000));
      retries++;
    } catch (error) {
      console.log(`‚ùå Erreur lors de la r√©cup√©ration de l'attestation: ${error}`);
      retries++;
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }
  
  throw new Error('Impossible de r√©cup√©rer l\'attestation apr√®s le nombre maximum de tentatives');
}

async function testCCTPBridge() {
  console.log('üöÄ D√©marrage du test de bridge CCTP');
  console.log(`üìã Configuration:`);
  console.log(`   - Source: Arbitrum Sepolia`);
  console.log(`   - Destination: Base Sepolia`);
  console.log(`   - Montant: ${TEST_AMOUNT} USDC`);
  console.log('');

  try {
    // √âtape 1: Cr√©er le Smart Account pour Arbitrum
    console.log('üîß Cr√©ation du Smart Account source (Arbitrum)...');
    const sourceSmartAccount = await createSmartAccountService(TEST_PRIVATE_KEY, SOURCE_CHAIN);
    console.log(`‚úÖ Smart Account source cr√©√©: ${sourceSmartAccount.getSmartAccountAddress()}`);
    
    // √âtape 2: V√©rifier le solde USDC
    console.log('üí∞ V√©rification du solde USDC...');
    const balance = await sourceSmartAccount.getUSDCBalance();
    console.log(`üí∞ Solde USDC sur Arbitrum: ${balance} USDC`);
    
    const balanceCheck = await sourceSmartAccount.checkSufficientBalance(TEST_AMOUNT, true);
    if (!balanceCheck.sufficient) {
      console.error(`üö® Solde USDC insuffisant!`);
      console.error(`   - Solde actuel: ${balanceCheck.currentBalance} USDC`);
      console.error(`   - Requis: ${balanceCheck.recommendedAmount} USDC`);
      console.error(`   - Manque: ${balanceCheck.shortfall} USDC`);
      console.error(`   - üí° Alimentez votre Smart Account avec des USDC depuis le faucet Circle`);
      console.error(`   - üåê Faucet: https://faucet.circle.com`);
      return;
    }
    
    console.log(`‚úÖ Solde suffisant pour le bridge`);
    
    // √âtape 3: Approuver et burn USDC sur Arbitrum
    console.log('üî• Burn USDC sur Arbitrum...');
    const burnAmount = parseUnits(TEST_AMOUNT, 6);
    const burnTxHash = await sourceSmartAccount.burnUSDC(
      burnAmount,
      DESTINATION_CHAIN,
      sourceSmartAccount.getSmartAccountAddress(),
      "fast"
    );
    console.log(`‚úÖ Burn transaction hash: ${burnTxHash}`);
    
    // √âtape 4: Attendre la confirmation
    console.log('‚è≥ Attente de la confirmation du burn...');
    const burnReceipt = await sourceSmartAccount.waitForUserOperationReceipt(burnTxHash);
    console.log(`‚úÖ Burn confirm√©: ${burnReceipt.receipt.transactionHash}`);
    
    // √âtape 5: R√©cup√©rer l'attestation
    console.log('üîç R√©cup√©ration de l\'attestation Circle...');
    const attestation = await retrieveAttestation(burnReceipt.receipt.transactionHash, SOURCE_CHAIN);
    console.log(`‚úÖ Attestation r√©cup√©r√©e`);
    
    // √âtape 6: Cr√©er le Smart Account pour Base
    console.log('üîß Cr√©ation du Smart Account destination (Base)...');
    const destSmartAccount = await createSmartAccountService(TEST_PRIVATE_KEY, DESTINATION_CHAIN);
    console.log(`‚úÖ Smart Account destination cr√©√©: ${destSmartAccount.getSmartAccountAddress()}`);
    
    // √âtape 7: Mint USDC sur Base
    console.log('ü™ô Mint USDC sur Base...');
    const mintTxHash = await destSmartAccount.mintUSDC(attestation);
    console.log(`‚úÖ Mint transaction hash: ${mintTxHash}`);
    
    // √âtape 8: Attendre la confirmation
    console.log('‚è≥ Attente de la confirmation du mint...');
    const mintReceipt = await destSmartAccount.waitForUserOperationReceipt(mintTxHash);
    console.log(`‚úÖ Mint confirm√©: ${mintReceipt.receipt.transactionHash}`);
    
    // √âtape 9: V√©rifier le solde final
    console.log('üí∞ V√©rification du solde final...');
    const finalBalance = await destSmartAccount.getUSDCBalance();
    console.log(`üí∞ Nouveau solde USDC sur Base: ${finalBalance} USDC`);
    
    console.log('');
    console.log('üéâ Bridge CCTP termin√© avec succ√®s!');
    console.log(`üìã R√©sum√©:`);
    console.log(`   - ${TEST_AMOUNT} USDC transf√©r√©s d'Arbitrum vers Base`);
    console.log(`   - Burn TX: ${burnReceipt.receipt.transactionHash}`);
    console.log(`   - Mint TX: ${mintReceipt.receipt.transactionHash}`);
    console.log(`   - Smart Account: ${destSmartAccount.getSmartAccountAddress()}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de bridge:', error);
  }
}

// Fonction pour v√©rifier les soldes sans faire de bridge
async function checkBalances() {
  console.log('üîç V√©rification des soldes...');
  
  try {
    // Arbitrum
    const arbSmartAccount = await createSmartAccountService(TEST_PRIVATE_KEY, SOURCE_CHAIN);
    const arbBalance = await arbSmartAccount.getUSDCBalance();
    console.log(`üí∞ Solde Arbitrum: ${arbBalance} USDC`);
    console.log(`   - Smart Account: ${arbSmartAccount.getSmartAccountAddress()}`);
    
    // Base
    const baseSmartAccount = await createSmartAccountService(TEST_PRIVATE_KEY, DESTINATION_CHAIN);
    const baseBalance = await baseSmartAccount.getUSDCBalance();
    console.log(`üí∞ Solde Base: ${baseBalance} USDC`);
    console.log(`   - Smart Account: ${baseSmartAccount.getSmartAccountAddress()}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des soldes:', error);
  }
}

// Point d'entr√©e
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--check-balances')) {
    await checkBalances();
  } else if (args.includes('--bridge')) {
    await testCCTPBridge();
  } else {
    console.log('üîß Script de test du bridge CCTP');
    console.log('');
    console.log('Usage:');
    console.log('  npm run test:cctp --check-balances  # V√©rifier les soldes');
    console.log('  npm run test:cctp --bridge          # Effectuer un bridge');
    console.log('');
    console.log('‚ö†Ô∏è  Assurez-vous d\'avoir configur√© PRIVATE_KEY dans .env');
    console.log('üí° Alimentez votre Smart Account avec des USDC depuis https://faucet.circle.com');
  }
}

main().catch(console.error); 